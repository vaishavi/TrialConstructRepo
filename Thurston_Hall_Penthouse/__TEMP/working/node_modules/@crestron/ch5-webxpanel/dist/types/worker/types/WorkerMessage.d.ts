import EventTypes from "../../events/enums/EventTypes";
import InternalEventTypes from "../../events/enums/InternalEventTypes";
import { LogLevel } from "../../utils/Logger";
export declare enum WorkerMessageTypes {
    INITIALIZE_WS = "INITIALIZE_WS",
    CONNECT_WS = "CONNECT_WS",
    DISCONNECT_WS = "DISCONNECT_WS",
    WEBSOCKET_EVENT = "WEBSOCKET_EVENT",
    SET_BASE_PATH = "SET_BASE_PATH",
    SET_JWT = "SET_JWT",
    AUTHENTICATE = "AUTHENTICATE",
    LOGGER_EVENT = "LOGGER_EVENT",
    BRIDGE_SEND_BOOLEAN_TO_NATIVE = "BRIDGE_SEND_BOOLEAN_TO_NATIVE",
    BRIDGE_SEND_INTEGER_TO_NATIVE = "BRIDGE_SEND_INTEGER_TO_NATIVE",
    BRIDGE_SEND_STRING_TO_NATIVE = "BRIDGE_SEND_STRING_TO_NATIVE",
    BRIDGE_SEND_OBJECT_TO_NATIVE = "BRIDGE_SEND_OBJECT_TO_NATIVE",
    BRIDGE_RECEIVE_BOOLEAN_FROM_NATIVE = "BRIDGE_RECEIVE_BOOLEAN_FROM_NATIVE",
    BRIDGE_RECEIVE_INTEGER_FROM_NATIVE = "BRIDGE_RECEIVE_INTEGER_FROM_NATIVE",
    BRIDGE_RECEIVE_STRING_FROM_NATIVE = "BRIDGE_RECEIVE_STRING_FROM_NATIVE",
    BRIDGE_RECEIVE_OBJECT_FROM_NATIVE = "BRIDGE_RECEIVE_OBJECT_FROM_NATIVE",
    CCS_DIAGNOSTICS = "CCS_DIAGNOSTICS",
    LICENSE_EVENT = "LICENSE_EVENT",
    VALIDATION_EVENT = "VALIDATION_EVENT",
    INTERNAL_EVENT = "INTERNAL_EVENT"
}
export declare type EventMessagePayload = {
    eventName: EventTypes;
    eventData?: Record<string, unknown>;
};
export declare type URLPayload = {
    url: string;
};
export declare type ConnectionStatusPayload = {
    connectionStatus: boolean;
    eventName?: string;
    data?: boolean | number;
};
export declare type LoggerPayload = {
    enabled: boolean;
    logLevel: LogLevel;
};
export declare type BridgePayload = {
    signalName: string;
    value: boolean | string | number;
};
export declare type BasePathPayload = {
    value: string;
};
export declare type ConfigPayload = {
    ipId: string;
    port: number;
    roomId: string;
    tokenSource: string;
    tokenUrl: string;
    url: string;
    authToken: string;
};
export declare type InternalEventPayload = {
    name: InternalEventTypes;
};
export declare type WorkerMessagePayload = EventMessagePayload | URLPayload | LoggerPayload | ConnectionStatusPayload | BridgePayload | ConnectionStatusPayload | BasePathPayload | ConfigPayload | InternalEventPayload;
export declare type WorkerMessage<T extends WorkerMessagePayload> = {
    type: WorkerMessageTypes;
    payload: T;
};
