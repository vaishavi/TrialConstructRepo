export declare enum ESignalTypes {
    NUMERIC = "numeric",
    BOOLEAN = "boolean",
    STRING = "string",
    REPEAT_DIGITAL = "repeatdigital"
}
export interface IMappedEvent {
    joinId: number;
    smartObjectId: number;
}
export interface IContract {
    signals: {
        events: {
            [key: string]: {
                [key: string]: IMappedEvent;
            };
        };
        states: {
            [key: string]: {
                [key: string]: {
                    [key: string]: string;
                };
            };
        };
    };
}
declare class ContractMapper {
    private static instance;
    static basePath: string;
    contract: IContract;
    initialized: boolean;
    static getInstance(): ContractMapper;
    loadContractFile(): void;
    private setContractFile;
    mapEvent(type: ESignalTypes, signalName: string): IMappedEvent;
    mapState(type: ESignalTypes, smartObjectId: number, joinId: number): string;
}
export { ContractMapper };
declare const _default: ContractMapper;
export default _default;
