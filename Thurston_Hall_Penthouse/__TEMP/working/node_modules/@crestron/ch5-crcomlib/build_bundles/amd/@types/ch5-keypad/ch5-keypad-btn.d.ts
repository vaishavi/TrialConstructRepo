import { Ch5Common } from "../ch5-common/ch5-common";
import { ICh5KeypadButtonAttributes } from "./interfaces/i-ch5-keypad-btn-attributes";
import { TKeypadButtonDefault } from "./interfaces/t-ch5-keypad";
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5KeypadButton extends Ch5Common implements ICh5KeypadButtonAttributes {
    static readonly ELEMENT_NAME = "ch5-keypad-button";
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    readonly primaryCssClass = "keypad-btn";
    readonly pressedCssClassPostfix = "-pressed";
    private readonly labelHasIconCssClass;
    private _ch5Properties;
    private labelMajorCssClass;
    private labelMinorCssClass;
    private _elButton;
    private _elMajorSpan;
    private _elMinorSpan;
    private _elIcon;
    private defaultValue;
    private _pressable;
    private _pressableIsPressedSubscription;
    static registerCustomElement(): void;
    static registerSignalAttributeTypes(): void;
    set labelMajor(value: string);
    get labelMajor(): string;
    set labelMinor(value: string);
    get labelMinor(): string;
    set iconClass(value: string);
    get iconClass(): string;
    set sendEventOnClick(value: string);
    get sendEventOnClick(): string;
    set key(value: string);
    get key(): string;
    set pressed(value: boolean);
    get pressed(): boolean;
    constructor(defaultObj: TKeypadButtonDefault);
    protected initAttributes(): void;
    connectedCallback(): void;
    protected attachEventListeners(): void;
    disconnectedCallback(): void;
    removeEventListeners(): void;
    unsubscribeFromSignals(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected createInternalHtml(): void;
    private clearComponentContent;
    protected initPressable(pressedClass: string): void;
    protected handleSendEventOnCLick(): void;
    protected _subscribeToPressableIsPressed(): void;
    protected _unsubscribeFromPressableIsPressed(): void;
    private handleIconLabelMajor;
    private handleLabelMinor;
    private handlePressed;
    private getDefaultValue;
    private setDefaultClasses;
}
