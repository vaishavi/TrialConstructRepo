import { Ch5Common } from "../ch5-common/ch5-common";
import { ICh5KeypadAttributes } from "./interfaces/i-ch5-keypad-attributes";
import { TCh5KeypadShape, TCh5KeypadSize, TCh5KeypadStretch, TCh5KeypadTextOrientation, TCh5KeypadType } from "./interfaces/t-ch5-keypad";
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5Keypad extends Ch5Common implements ICh5KeypadAttributes {
    static readonly ELEMENT_NAME = "ch5-keypad";
    private static readonly TOTAL_KEYPAD_BUTTONS;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly TYPES: TCh5KeypadType[];
    static readonly SHAPES: TCh5KeypadShape[];
    static readonly STRETCHES: TCh5KeypadStretch[];
    static readonly TEXT_ORIENTATIONS: TCh5KeypadTextOrientation[];
    static readonly SIZES: TCh5KeypadSize[];
    static readonly COMPONENT_DATA: any;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    readonly primaryCssClass = "ch5-keypad";
    private _ch5Properties;
    private _elContainer;
    private keypadButtons;
    private signalNameOnContract;
    static registerCustomElement(): void;
    static registerSignalAttributeTypes(): void;
    set contractName(value: string);
    get contractName(): string;
    set type(value: TCh5KeypadType);
    get type(): TCh5KeypadType;
    set shape(value: TCh5KeypadShape);
    get shape(): TCh5KeypadShape;
    set stretch(value: TCh5KeypadStretch | null);
    get stretch(): TCh5KeypadStretch | null;
    set size(value: TCh5KeypadSize);
    get size(): TCh5KeypadSize;
    set textOrientation(value: TCh5KeypadTextOrientation);
    get textOrientation(): TCh5KeypadTextOrientation;
    set showExtraButton(value: boolean);
    get showExtraButton(): boolean;
    set sendEventOnClickStart(value: string);
    get sendEventOnClickStart(): string;
    set useContractForEnable(value: boolean);
    get useContractForEnable(): boolean;
    set useContractForShow(value: boolean);
    get useContractForShow(): boolean;
    set useContractForCustomStyle(value: boolean);
    get useContractForCustomStyle(): boolean;
    set useContractForCustomClass(value: boolean);
    get useContractForCustomClass(): boolean;
    set useContractForExtraButtonShow(value: boolean);
    get useContractForExtraButtonShow(): boolean;
    set receiveStateExtraButtonShow(value: string);
    get receiveStateExtraButtonShow(): string;
    set hidePoundButton(value: boolean);
    get hidePoundButton(): boolean;
    set hideAsteriskButton(value: boolean);
    get hideAsteriskButton(): boolean;
    set receiveStateHideAsteriskButton(value: string);
    get receiveStateHideAsteriskButton(): string;
    set receiveStateHidePoundButton(value: string);
    get receiveStateHidePoundButton(): string;
    set useContractForHidePoundButton(value: boolean);
    get useContractForHidePoundButton(): boolean;
    set useContractForHideAsteriskButton(value: boolean);
    get useContractForHideAsteriskButton(): boolean;
    constructor();
    private clearComponentContent;
    protected initAttributes(): void;
    connectedCallback(): void;
    private createKeyPadButtons;
    disconnectedCallback(): void;
    private removeEvents;
    unsubscribeFromSignals(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected attachEventListeners(): void;
    protected createInternalHtml(): void;
    private buildRuntimeChildButtonList;
    private handleType;
    private handleShape;
    private handleStretch;
    private handleTextOrientation;
    private handleSize;
    private handleShowExtraButton;
    private handleContract;
    private contractDefaultHelper;
    private handleSendEventOnClickStart;
    private handleStretchResize;
    private handleHidePoundButton;
    private handleHideAsteriskButton;
    private updateCssClass;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
    private resizeHandler;
    private debounceContract;
}
