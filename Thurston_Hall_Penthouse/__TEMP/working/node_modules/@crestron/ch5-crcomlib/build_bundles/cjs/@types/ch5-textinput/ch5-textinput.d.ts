import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { TCh5TextInputIconPosition, TCh5TextInputType, TCh5TextInputSize, TCh5TextInputStretch, TCh5TextInputTextTransform } from './interfaces/t-ch5-text-input';
import { ICh5TextInputAttributes } from './interfaces/i-ch5-text-input-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
import { Ch5CommonInput } from "../ch5-common-input/ch5-common-input";
import HtmlCallback from "../ch5-common/utils/html-callback";
export declare class Ch5TextInput extends Ch5CommonInput implements ICh5TextInputAttributes {
    static readonly ICON_POSITION: TCh5TextInputIconPosition[];
    static readonly INPUT_TYPE: TCh5TextInputType[];
    static readonly SIZE: TCh5TextInputSize[];
    static readonly STRETCH: TCh5TextInputStretch[];
    static readonly TEXT_TRANSFORM: TCh5TextInputTextTransform[];
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-textinput";
    primaryCssClass: string;
    private _ch5Properties;
    private _elContainer;
    protected _elInput: HTMLInputElement;
    private _elIcon;
    private _labelElement;
    private _maskingUtility;
    private _scalingUtility;
    private lastValidState;
    private dirtyCustomEvent;
    private validityChangeEvent;
    private cleanCustomEvent;
    private _onValidityChange;
    set pattern(value: string);
    get pattern(): string;
    set mask(value: string);
    get mask(): string;
    set iconClass(value: string);
    get iconClass(): string;
    set icon(value: string);
    get icon(): string;
    set label(value: string);
    get label(): string;
    set placeholder(value: string);
    get placeholder(): string;
    set iconPosition(value: TCh5TextInputIconPosition);
    get iconPosition(): TCh5TextInputIconPosition;
    set type(value: TCh5TextInputType);
    get type(): TCh5TextInputType;
    set minLength(value: number);
    get minLength(): number;
    set maxLength(value: number);
    get maxLength(): number;
    set minValue(value: number);
    get minValue(): number;
    set maxValue(value: number);
    get maxValue(): number;
    set size(value: TCh5TextInputSize);
    get size(): TCh5TextInputSize;
    set stretch(value: TCh5TextInputStretch | null);
    get stretch(): TCh5TextInputStretch | null;
    set textTransform(value: TCh5TextInputTextTransform);
    get textTransform(): TCh5TextInputTextTransform;
    set scaling(value: boolean);
    get scaling(): boolean;
    set minimumFontSize(value: number);
    get minimumFontSize(): number;
    set tabIndex(value: number);
    get tabIndex(): number;
    set receiveStateFocus(value: string);
    get receiveStateFocus(): string;
    set receiveStateValue(value: string);
    get receiveStateValue(): string;
    set sendEventOnChange(value: string);
    get sendEventOnChange(): string;
    set sendEventOnFocus(value: string);
    get sendEventOnFocus(): string;
    set sendEventOnBlur(value: string);
    get sendEventOnBlur(): string;
    set value(value: string);
    get value(): string;
    set sendEventOnEnterKey(value: string);
    get sendEventOnEnterKey(): string;
    set sendEventOnEscKey(value: string);
    get sendEventOnEscKey(): string;
    set onValidityChange(callback: HtmlCallback | ((this: any, arg: any) => void));
    get onValidityChange(): HtmlCallback | ((this: any, arg: any) => void);
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEventListeners(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    private handlePattern;
    private handleMask;
    private handleIconClass;
    private handleIcon;
    private handleLabel;
    private handlePlaceholder;
    private handleType;
    private handleMinValue;
    private handleMaxValue;
    private handleSize;
    private handleStretch;
    private handleTextTransform;
    private handleScaling;
    private updateCssClass;
    onChangeHandler: (inEvent: Event) => void;
    protected _onChangeSignal(value: string): void;
    dirtyTimerHandle(): void;
    valueSync(): void;
    private keyDownHandler;
    private onFocusHandler;
    onBlurHandler: () => void;
    protected highlightInputIfNotValid(): void;
    onKeyPressHandler: (inEvent: Event) => void;
    setValue(value: string): void;
    submit(): void;
    reset(): void;
    updateValue(value: string): void;
    getValid(): boolean;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
    private _createValidityChangeEvent;
    private _createDirtyCustomEvent;
    private _createCleanCustomEvent;
    private _createCustomEvent;
    private _addAriaAttributes;
}
