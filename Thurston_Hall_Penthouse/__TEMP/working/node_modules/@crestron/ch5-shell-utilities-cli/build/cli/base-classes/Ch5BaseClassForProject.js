"use strict";
// Copyright (C) 2023 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5BaseClassForProject = void 0;
var Ch5BaseClassForCliCreate_1 = require("../Ch5BaseClassForCliCreate");
var Ch5ExportProjectCli_1 = require("../export-project/Ch5ExportProjectCli");
var path = require('path');
var fs = require("fs");
var fsExtra = require("fs-extra");
var process = require('process');
var editJsonFile = require("edit-json-file");
var Ch5BaseClassForProject = /** @class */ (function (_super) {
    __extends(Ch5BaseClassForProject, _super);
    /**
     * Constructor
     */
    function Ch5BaseClassForProject(showOutputMessages) {
        if (showOutputMessages === void 0) { showOutputMessages = true; }
        var _this = _super.call(this) || this;
        _this.showOutputMessages = showOutputMessages;
        _this.CLI_SHELL_FOLDER = path.join(__dirname, "../../", "shell");
        _this.CLI_TEMPLATES_SHELL_FOLDER = path.join(__dirname, "../../", "project-templates", "shell-template");
        _this.CLI_TEMPLATES_ZOOM_ROOM_CONTROL_FOLDER = path.join(__dirname, "../../", "project-templates", "zoomroomcontrol");
        _this.PROJECT_CONFIG_JSON_PATH = path.join("app", "project-config.json");
        _this.VSCODE_SCHEMA_JSON_PATH = path.join(".vscode", "project-config-schema.json");
        _this._outputResponse = null;
        _this._configFilePath = "";
        return _this;
    }
    /**
     * Initialize process
     */
    Ch5BaseClassForProject.prototype.initialize = function () {
        this.logger.start("initialize");
        this._outputResponse = {
            askConfirmation: false,
            result: false,
            errorMessage: "",
            warningMessage: "",
            successMessage: "",
            backupFolder: "",
            data: {
                updatedInputs: [],
                projectName: "",
                projectType: ""
            }
        };
        if (this.isCreateOrUpdateBasedOnConfigJson() === false) {
            // Applicable only for update
            if (this.inputArgs["selectedTheme"]) {
                var getAllThemeNames = this.projectConfig.getAllThemeNames();
                this.inputArgs["selectedTheme"].allowedValues = getAllThemeNames;
                this.inputArgs["selectedTheme"].allowedAliases = getAllThemeNames;
            }
        }
        this.logger.end();
    };
    Ch5BaseClassForProject.prototype.validateCLIInputArgument = function (inputObj) {
        this.logger.log("validateCLIInputArgument: " + inputObj.key + " - " + inputObj.inputValue, inputObj);
        var value = String(inputObj.inputValue).trim();
        if (inputObj) {
            if (inputObj.validation && inputObj.validation !== "") {
                if (inputObj.validation === "validateProjectType") {
                    var valOutput = this.validateProjectType(inputObj.allowedValues, value);
                    return {
                        value: valOutput.value,
                        warning: ""
                    };
                }
                else if (inputObj.validation === "validatePackageJsonProjectName") {
                    var valOutput = this.validatePackageJsonProjectName(value);
                    if (valOutput.isValid === false) {
                        return {
                            value: null,
                            warning: valOutput.warning
                        };
                    }
                    else {
                        return {
                            value: value,
                            warning: ""
                        };
                    }
                }
            }
            else {
                if (inputObj.type === "boolean") {
                    if (inputObj.allowedAliases && inputObj.allowedAliases.length > 0 && inputObj.allowedAliases.includes(value)) {
                        var val = this.utils.toBoolean(value);
                        return {
                            value: val,
                            warning: ""
                        };
                    }
                    else {
                        if (!this.utils.isValidInput(value)) {
                            // If no value is entered - null, empty, undefined
                            var val = this.utils.toBoolean(inputObj.default);
                            return {
                                value: val,
                                warning: ""
                            };
                        }
                        else {
                            if ((this.utils.isValidInput(inputObj.valueIfInvalid))) {
                                // If no value is entered - null, empty, undefined
                                var val = this.utils.toBoolean(inputObj.valueIfInvalid);
                                return {
                                    value: val,
                                    warning: ""
                                };
                            }
                        }
                    }
                }
                else if (inputObj.type === "enum") {
                    if (inputObj.allowedAliases && inputObj.allowedAliases.length > 0 && inputObj.allowedAliases.includes(value)) {
                        return {
                            value: value,
                            warning: ""
                        };
                    }
                    else {
                        if (!this.utils.isValidInput(value)) {
                            // If no value is entered - null, empty, undefined
                            return {
                                value: inputObj.default,
                                warning: ""
                            };
                        }
                        else {
                            if ((this.utils.isValidInput(inputObj.valueIfInvalid))) {
                                // If no value is entered - null, empty, undefined
                                return {
                                    value: inputObj.valueIfInvalid,
                                    warning: ""
                                };
                            }
                        }
                    }
                }
                else if (inputObj.type === "string") {
                    if (inputObj.validation !== "") {
                        if (inputObj.validation === "validatePackageJsonProjectName") {
                            var valOutput = this.validatePackageJsonProjectName(value);
                            if (valOutput.isValid === false) {
                                return {
                                    value: null,
                                    warning: valOutput.warning
                                };
                            }
                            else {
                                return {
                                    value: value,
                                    warning: ""
                                };
                            }
                        }
                        return {
                            value: value,
                            warning: ""
                        };
                    }
                    else {
                        return {
                            value: value,
                            warning: ""
                        };
                    }
                }
            }
        }
        return {
            value: "",
            warning: this.getText("VERIFY_INPUT_PARAMS.INVALID_INPUT", inputObj.key)
        };
    };
    Ch5BaseClassForProject.prototype.validateProjectType = function (templateProjectTypes, projectType) {
        /*
         - projectType must be "zoomroomcontrol" or "shell-template", and it is case-insensitive.
        */
        if (projectType && projectType.trim().length > 0) {
            projectType = projectType.trim().toLowerCase();
            var indexForProjectType = templateProjectTypes.findIndex(function (element) {
                return element.toLowerCase() === projectType.toLowerCase();
            });
            if (indexForProjectType === -1) {
                this.logger.printWarning("projectType: " + projectType + " is invalid. The projectType is set to 'shell-template'");
                return {
                    value: "shell-template",
                    isValid: true,
                    warning: ""
                };
            }
            else {
                return {
                    value: projectType,
                    isValid: true,
                    warning: ""
                };
            }
        }
        else {
            this.logger.log("projectType: " + projectType + " is empty.");
            return {
                value: "shell-template",
                isValid: false,
                warning: ""
            };
        }
    };
    Ch5BaseClassForProject.prototype.validatePackageJsonProjectName = function (packageName) {
        /*
        - project name length should be greater than zero and cannot exceed 214
        - project name characters must be lowercase i.e., no uppercase or mixed case names are allowed
        - project name can consist of hyphens, tilde, numbers and alphabets
        - project name can consist of underscore and dot but these cannot start with these characters
        - project name should not end with a dot
        - project name must not contain any non-url-safe characters (since name ends up being part of a URL)
        - project name should not contain any spaces or any of the following characters: ! @ # $ % ^ & * ( ) + = [ { } ] | \ : ; " ' < , > ? /
        */
        if (packageName && packageName.trim().length > 0) {
            packageName = packageName.trim(); //.toLowerCase();
            // packageName = packageName.substring(0, 213);
            //  const packageNameValidity = new RegExp(/^[a-z][a-z0-9-._$]*$/).test(packageName);
            var regexValue = /^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)?\/)?[a-z0-9-~][a-z0-9-._~]*$/;
            var packageNameValidity = new RegExp(regexValue).test(packageName);
            if (packageNameValidity === false) {
                return {
                    value: null,
                    isValid: false,
                    warning: this.getText("COMMON.VALIDATIONS.PROJECT_NAME")
                };
            }
            else {
                if (packageName.length > 214) {
                    return {
                        value: null,
                        isValid: false,
                        warning: this.getText("COMMON.VALIDATIONS.PROJECT_NAME")
                    };
                }
                else if (this.containsSpecialCharsInPackageName(packageName)) {
                    return {
                        value: null,
                        isValid: false,
                        warning: this.getText("COMMON.VALIDATIONS.PROJECT_NAME")
                    };
                }
                else {
                    return {
                        value: packageName,
                        isValid: true,
                        warning: ""
                    };
                }
            }
        }
        else {
            return {
                value: "",
                isValid: false,
                warning: this.getText("COMMON.VALIDATIONS.PROJECT_NAME")
            };
        }
    };
    Ch5BaseClassForProject.prototype.containsSpecialCharsInPackageName = function (packageName) {
        // Allowed characters for any position ~ - a-z 0-9
        // Not allowed special characters at any position ! @ # $ % ^ & * ( ) + = [ { } ] | \ : ; " ' < , > ? / 
        // _ and . will work only if project name start from alphabets or any other allowed characters 
        var invalidCharsArray = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '=', '[', '{', '}', ']', '|', '\\', ':', ';', '<', ',', '>', '?', '/', '\'', '\"'];
        for (var i = 0; i < invalidCharsArray.length; i++) {
            if (packageName.includes(invalidCharsArray[i])) {
                return true;
            }
        }
        var specialArray1 = ["_", "."];
        for (var i = 0; i < specialArray1.length; i++) {
            if (packageName.charAt(0) === specialArray1[i]) {
                return true;
            }
        }
        if (packageName.charAt(packageName.length - 1) === ".") {
            return true;
        }
        return false;
    };
    Ch5BaseClassForProject.prototype.printWarningsOnVerifiedInputs = function () {
        var tabDisplayText = this.getText("COMMON.HYPHEN_DELIMITER");
        var warningMessage = "";
        for (var i = 0; i < this._outputResponse.data.updatedInputs.length; i++) {
            if (this.utils.isValidInput(this._outputResponse.data.updatedInputs[i].warning) && this._outputResponse.data.updatedInputs[i].inputReceived === true) {
                warningMessage += tabDisplayText + this._outputResponse.data.updatedInputs[i].key + ": " + this._outputResponse.data.updatedInputs[i].warning;
            }
        }
        if (warningMessage !== "") {
            if (this.showOutputMessages === true) {
                this.logger.printWarning(this.getText("VERIFY_INPUT_PARAMS.INPUT_WARNING_TITLE", warningMessage));
            }
        }
    };
    Ch5BaseClassForProject.prototype.getConfigFileSchemaPath = function () {
        return path.resolve(this.CLI_SHELL_FOLDER, this.VSCODE_SCHEMA_JSON_PATH);
    };
    Ch5BaseClassForProject.prototype.addUpdatedInputs = function (inputUpdateValue) {
        this._outputResponse.data.updatedInputs.push(inputUpdateValue);
    };
    Ch5BaseClassForProject.prototype.validateAndSetReceivedInputValues = function () {
        var _this = this;
        Object.entries(this.inputArgs).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            if (value.isSpecialArgument === false) {
                var inputUpdate = __assign(__assign({}, value), { argsValue: null, warning: "" });
                _this.logger.log("inputUpdate is ", inputUpdate);
                var validationResponse = _this.validateCLIInputArgument(value); //, value.key, value.inputValue);
                _this.logger.log("validationResponse is ", validationResponse);
                if (validationResponse.warning === "") {
                    inputUpdate.argsValue = validationResponse.value;
                }
                else {
                    inputUpdate.warning = validationResponse.warning;
                }
                _this.addUpdatedInputs(inputUpdate);
            }
        });
        this.logger.log("validateAndSetReceivedInputValues - outputResponse.data.updatedInputs: ", this.getOutputResponse().data.updatedInputs);
    };
    Ch5BaseClassForProject.prototype.askQuestionsToUser = function (taskType) {
        return __awaiter(this, void 0, void 0, function () {
            var outputResponse, _loop_1, this_1, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        outputResponse = this.getOutputResponse();
                        this.logger.log("checkPromptQuestions - outputResponse.data.updatedInputs", outputResponse.data.updatedInputs);
                        _loop_1 = function (i) {
                            var isValidToAskQuestion, choicesList, componentsQuery, _b, question, response, choicesList, componentsQuery, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        isValidToAskQuestion = false;
                                        if (taskType === "create") {
                                            isValidToAskQuestion = (outputResponse.data.updatedInputs[i].question.name !== "");
                                        }
                                        else if (taskType === "update") {
                                            isValidToAskQuestion = (outputResponse.data.updatedInputs[i].question.name !== "") && (outputResponse.data.updatedInputs[i].inputReceived === true);
                                        }
                                        if (!isValidToAskQuestion) return [3 /*break*/, 6];
                                        if (!!this_1.utils.isValidInput(outputResponse.data.updatedInputs[i].argsValue)) return [3 /*break*/, 6];
                                        if (!(outputResponse.data.updatedInputs[i].type === "enum")) return [3 /*break*/, 2];
                                        choicesList = outputResponse.data.updatedInputs[i].allowedValues;
                                        componentsQuery = new this_1.getSelect({
                                            name: outputResponse.data.updatedInputs[i].key,
                                            message: this_1.getText(outputResponse.data.updatedInputs[i].question.name, outputResponse.data.updatedInputs[i].key),
                                            choices: choicesList
                                        });
                                        _b = outputResponse.data.updatedInputs[i];
                                        return [4 /*yield*/, componentsQuery.run()
                                                .then(function (responseValue) { return responseValue; })
                                                .catch(function (error) { throw new Error(_this.getText("COMMON.SOMETHING_WENT_WRONG")); })];
                                    case 1:
                                        _b.argsValue = _d.sent();
                                        this_1.logger.log(outputResponse.data.updatedInputs[i].key + ": ", outputResponse.data.updatedInputs[i].argsValue);
                                        return [3 /*break*/, 6];
                                    case 2:
                                        if (!(outputResponse.data.updatedInputs[i].type === "string")) return [3 /*break*/, 4];
                                        question = {
                                            type: "input",
                                            name: outputResponse.data.updatedInputs[i].key,
                                            initial: outputResponse.data.updatedInputs[i].question.initialValue,
                                            hint: "",
                                            message: this_1.getText(outputResponse.data.updatedInputs[i].question.name, outputResponse.data.updatedInputs[i].key),
                                            validate: function (inputValue) {
                                                outputResponse.data.updatedInputs[i].inputValue = inputValue;
                                                var valResponse = _this.validateCLIInputArgument(outputResponse.data.updatedInputs[i]); //, outputResponse.data.updatedInputs[i]["key"], inputValue);
                                                if (valResponse.warning && valResponse.warning !== "") {
                                                    return valResponse.warning; // String output is considered as false for validate method.
                                                }
                                                else {
                                                    return true;
                                                }
                                            }
                                        };
                                        return [4 /*yield*/, this_1.getPrompt(question)];
                                    case 3:
                                        response = _d.sent();
                                        // Note that the prompt will keep asking inputs till it validates the correct value
                                        if (!this_1.utils.isValidInput(response[outputResponse.data.updatedInputs[i].key])) {
                                            throw new Error(this_1.getText("COMMON.SOMETHING_WENT_WRONG"));
                                        }
                                        outputResponse.data.updatedInputs[i].argsValue = response.projectName; //.toLowerCase();
                                        this_1.logger.log(outputResponse.data.updatedInputs[i].key + ": ", outputResponse.data.updatedInputs[i].argsValue);
                                        return [3 /*break*/, 6];
                                    case 4:
                                        if (!(outputResponse.data.updatedInputs[i].type === "boolean")) return [3 /*break*/, 6];
                                        choicesList = outputResponse.data.updatedInputs[i].allowedValues;
                                        componentsQuery = new this_1.getSelect({
                                            name: outputResponse.data.updatedInputs[i].key,
                                            message: this_1.getText(outputResponse.data.updatedInputs[i].question.name, outputResponse.data.updatedInputs[i].key),
                                            choices: choicesList
                                        });
                                        _c = outputResponse.data.updatedInputs[i];
                                        return [4 /*yield*/, componentsQuery.run()
                                                .then(function (responseValue) { return responseValue; })
                                                .catch(function (error) { throw new Error(_this.getText("COMMON.SOMETHING_WENT_WRONG")); })];
                                    case 5:
                                        _c.argsValue = _d.sent();
                                        outputResponse.data.updatedInputs[i].argsValue = this_1.utils.toBoolean(outputResponse.data.updatedInputs[i].argsValue);
                                        _d.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < outputResponse.data.updatedInputs.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1(i)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Ch5BaseClassForProject.prototype.getProjectName = function () {
        if (this.isCreateOrUpdateBasedOnConfigJson()) {
            var inputConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getConfigJsonFilePath()));
            this._outputResponse.data.projectName = inputConfigJSON.projectName; // .toLowerCase();
            this._outputResponse.data.projectType = inputConfigJSON.projectType.toLowerCase();
        }
        else {
            var projectNameObject = this._outputResponse.data.updatedInputs.find(function (objValue) { return objValue.key === "projectName"; });
            this._outputResponse.data.projectName = projectNameObject.argsValue; // .toLowerCase();
            var projectTypeObject = this._outputResponse.data.updatedInputs.find(function (objValue) { return objValue.key === "projectType"; });
            this._outputResponse.data.projectType = projectTypeObject.argsValue.toLowerCase();
        }
        this.logger.log("this._outputResponse.data.projectName value is ", this._outputResponse.data.projectName);
        return this._outputResponse.data.projectName;
    };
    Ch5BaseClassForProject.prototype.setProjectVariables = function () {
        if (this.isCreateOrUpdateBasedOnConfigJson()) {
            var inputConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getConfigJsonFilePath()));
            this._outputResponse.data.projectName = inputConfigJSON.projectName;
            this._outputResponse.data.projectType = inputConfigJSON.projectType.toLowerCase();
        }
        else {
            var projectNameObject = this._outputResponse.data.updatedInputs.find(function (objValue) { return objValue.key === "projectName"; });
            if (projectNameObject.inputReceived === false) {
                var inputConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getCreatedOrUpdateProjectPathProjectConfigJsonFile()));
                this._outputResponse.data.projectName = inputConfigJSON.projectName;
            }
            else {
                this._outputResponse.data.projectName = projectNameObject.argsValue;
            }
            var projectTypeObject = this._outputResponse.data.updatedInputs.find(function (objValue) { return objValue.key === "projectType"; });
            if (projectTypeObject.inputReceived === false) {
                var inputConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getCreatedOrUpdateProjectPathProjectConfigJsonFile()));
                this._outputResponse.data.projectType = inputConfigJSON.projectType.toLowerCase();
            }
            else {
                this._outputResponse.data.projectType = projectTypeObject.argsValue.toLowerCase();
            }
        }
        this.logger.log("this._outputResponse.data.projectName value is ", this._outputResponse.data.projectName);
        return this._outputResponse.data.projectName;
    };
    Ch5BaseClassForProject.prototype.traverseAndValidateProjectFolderAndVariables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pathToCreateProject, isFolder, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pathToCreateProject = path.resolve("./", this.getProjectName());
                        this.makeDirectoryForCreateProject(pathToCreateProject);
                        process.chdir(pathToCreateProject);
                        this.logger.log("1. current working directory: " + pathToCreateProject);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.utils.readdirAsync(pathToCreateProject)];
                    case 2:
                        isFolder = _a.sent();
                        if ((isFolder && isFolder.length > 0)) {
                            throw new Error(this.getText("PROCESS_REQUEST.FOLDER_CONTAINS_FILES", pathToCreateProject));
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new Error(this.getText("PROCESS_REQUEST.FOLDER_CONTAINS_FILES", pathToCreateProject));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Ch5BaseClassForProject.prototype.removeFolderInProject = function (folderName) {
        var location = path.resolve(folderName);
        this.logger.log("shell-template removeFolderInProject: ", location);
        fsExtra.removeSync(path.resolve(location));
    };
    Ch5BaseClassForProject.prototype.removeFileInProject = function (fileName) {
        var location = path.resolve(fileName);
        this.logger.log("shell-template removeFileInProject: ", fileName);
        fsExtra.removeSync(path.resolve(location));
    };
    Ch5BaseClassForProject.prototype.copyZoomFolderToProject = function (folderName) {
        var fromLocation = path.resolve(this.CLI_TEMPLATES_ZOOM_ROOM_CONTROL_FOLDER, folderName);
        var toLocation = path.resolve(folderName);
        this.logger.log("zoomroomcontrol copyZoomFolderToProject: copy from " + fromLocation + " to " + toLocation);
        fsExtra.copySync(fromLocation, toLocation);
    };
    Ch5BaseClassForProject.prototype.copyZoomFileToProject = function (fileName) {
        var fromLocation = path.resolve(this.CLI_TEMPLATES_ZOOM_ROOM_CONTROL_FOLDER, fileName);
        var toLocation = path.resolve(fileName);
        this.logger.log("zoomroomcontrol copyZoomFileToProject: copy from " + fromLocation + " to " + toLocation);
        fsExtra.copySync(fromLocation, toLocation);
    };
    Ch5BaseClassForProject.prototype.copyShellFolderToProject = function (folderName) {
        var fromLocation = path.resolve(this.CLI_TEMPLATES_SHELL_FOLDER, folderName);
        var toLocation = path.resolve(folderName);
        this.logger.log("shell-template copyShellFolderToProject: copy from " + fromLocation + " to " + toLocation);
        fsExtra.copySync(fromLocation, toLocation);
    };
    Ch5BaseClassForProject.prototype.copyShellFileToProject = function (fileName) {
        var fromLocation = path.resolve(this.CLI_TEMPLATES_SHELL_FOLDER, fileName);
        var toLocation = path.resolve(fileName);
        this.logger.log("shell-template copyShellFileToProject: copy from " + fromLocation + " to " + toLocation);
        fsExtra.copySync(fromLocation, toLocation);
    };
    Ch5BaseClassForProject.prototype.copyShellFolderContentsToProjectFolder = function () {
        fsExtra.copySync(path.resolve(this.CLI_SHELL_FOLDER), "./");
    };
    Ch5BaseClassForProject.prototype.renamePackageJsonFile = function () {
        // Reason for below: https://docs.npmjs.com/cli/v8/configuring-npm/package-lock-json
        var fromFile = path.resolve("./", "packagelock.json");
        var toFile = path.resolve("./", "package-lock.json");
        fs.renameSync(fromFile, toFile);
        if (fs.existsSync(fromFile)) {
            fs.unlinkSync(fromFile);
        }
    };
    Ch5BaseClassForProject.prototype.setFilesAsPerProjectType = function () {
        var outputResponse = this.getOutputResponse();
        if (outputResponse.data.projectType === "zoomroomcontrol") {
            // Remove folders from shell-template
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFolders.length; i++) {
                this.removeFolderInProject(this.CONFIG_FILE.custom.templates["shell-template"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFiles.length; i++) {
                this.removeFileInProject(this.CONFIG_FILE.custom.templates["shell-template"].customFiles[i]);
            }
            // Copy folders from Zoom
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders.length; i++) {
                this.copyZoomFolderToProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles.length; i++) {
                this.copyZoomFileToProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i]);
            }
        }
        else if (outputResponse.data.projectType === "shell-template") {
            // Remove folders from zoomroomcontrol
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders.length; i++) {
                this.removeFolderInProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles.length; i++) {
                this.removeFileInProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i]);
            }
            // Copy folders from Shell
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFolders.length; i++) {
                this.copyShellFolderToProject(this.CONFIG_FILE.custom.templates["shell-template"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFiles.length; i++) {
                this.copyShellFileToProject(this.CONFIG_FILE.custom.templates["shell-template"].customFiles[i]);
            }
        }
    };
    Ch5BaseClassForProject.prototype.updateFilesAsPerProjectType = function () {
        // Do not pick package.json and packagelock.json - once the project is created, then the files can be updated by user. So replacing makes no sense.
        var outputResponse = this.getOutputResponse();
        if (outputResponse.data.projectType === "zoomroomcontrol") {
            var zoomLibraryPackageJson = "";
            // Remove folders from shell-template
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFolders.length; i++) {
                this.removeFolderInProject(this.CONFIG_FILE.custom.templates["shell-template"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFiles.length; i++) {
                if (!['package.json', 'packagelock.json'].includes(this.CONFIG_FILE.custom.templates["shell-template"].customFiles[i])) {
                    this.removeFileInProject(this.CONFIG_FILE.custom.templates["shell-template"].customFiles[i]);
                }
            }
            // Copy folders from Zoom
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders.length; i++) {
                this.copyZoomFolderToProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles.length; i++) {
                if (!['package.json', 'packagelock.json'].includes(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i])) {
                    this.copyZoomFileToProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i]);
                }
                else if (this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i] === "package.json") {
                    zoomLibraryPackageJson = path.resolve(this.CLI_TEMPLATES_ZOOM_ROOM_CONTROL_FOLDER, this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i]);
                }
            }
            this.addZoomPackageDependency(zoomLibraryPackageJson);
        }
        else if (outputResponse.data.projectType === "shell-template") {
            // Remove folders from zoomroomcontrol
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders.length; i++) {
                this.removeFolderInProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles.length; i++) {
                if (!['package.json', 'packagelock.json'].includes(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i])) {
                    this.removeFileInProject(this.CONFIG_FILE.custom.templates["zoomroomcontrol"].customFiles[i]);
                }
            }
            // Copy folders from Shell
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFolders.length; i++) {
                this.copyShellFolderToProject(this.CONFIG_FILE.custom.templates["shell-template"].customFolders[i]);
            }
            for (var i = 0; i < this.CONFIG_FILE.custom.templates["shell-template"].customFiles.length; i++) {
                if (!['package.json', 'packagelock.json'].includes(this.CONFIG_FILE.custom.templates["shell-template"].customFiles[i])) {
                    this.copyShellFileToProject(this.CONFIG_FILE.custom.templates["shell-template"].customFiles[i]);
                }
            }
            this.removeZoomPackageDependency();
        }
    };
    Ch5BaseClassForProject.prototype.getShellTemplateProjectConfigPath = function () {
        return path.resolve(this.CLI_SHELL_FOLDER, this.PROJECT_CONFIG_JSON_PATH);
    };
    Ch5BaseClassForProject.prototype.setValueInPackageJson = function (key, value) {
        this.logger.log("Setting " + key + " in package.json as " + value);
        var packageJsonFile = editJsonFile("./package.json"); // Must be after directory change
        packageJsonFile.set(key, value);
        packageJsonFile.save();
    };
    Ch5BaseClassForProject.prototype.removeZoomPackageDependency = function () {
        var packageJsonFile = editJsonFile("./package.json"); // Must be after directory change
        var getPackageJsonContent = packageJsonFile.get();
        // this.logger.log("removeZoomPackageDependency", getPackageJsonContent.dependencies["@crestron/ch5-zoom-lib"]);
        var key = "dependencies";
        var dependencyObject = getPackageJsonContent.dependencies;
        delete dependencyObject["@crestron/ch5-zoom-lib"];
        var value = JSON.parse(JSON.stringify(dependencyObject));
        this.logger.log("Setting " + key + " in package.json as " + value);
        packageJsonFile.set(key, value);
        packageJsonFile.save();
    };
    Ch5BaseClassForProject.prototype.addZoomPackageDependency = function (filePathZoomPackageJson) {
        var zoomPackageJsonFile = editJsonFile(filePathZoomPackageJson); // Must be after directory change
        var getZoomPackageJsonContent = zoomPackageJsonFile.get();
        var zoomLibVal = getZoomPackageJsonContent.dependencies["@crestron/ch5-zoom-lib"];
        var packageJsonFile = editJsonFile("./package.json"); // Must be after directory change
        var getPackageJsonContent = packageJsonFile.get();
        // this.logger.log("addZoomPackageDependency", getPackageJsonContent.dependencies["@crestron/ch5-zoom-lib"]);
        var key = "dependencies";
        var dependencyObject = getPackageJsonContent.dependencies;
        dependencyObject["@crestron/ch5-zoom-lib"] = zoomLibVal;
        var value = JSON.parse(JSON.stringify(dependencyObject));
        this.logger.log("Setting " + key + " in package.json as " + value);
        packageJsonFile.set(key, value);
        packageJsonFile.save();
    };
    Ch5BaseClassForProject.prototype.getCreatedOrUpdateProjectPathProjectConfigJsonFile = function () {
        return path.resolve(this.PROJECT_CONFIG_JSON_PATH);
    };
    Ch5BaseClassForProject.prototype.getCreatedOrUpdateProjectPathProjectConfigJsonSchemaFile = function () {
        return path.resolve(this.VSCODE_SCHEMA_JSON_PATH);
    };
    Ch5BaseClassForProject.prototype.makeDirectoryForCreateProject = function (projectName) {
        if (!fs.existsSync(projectName)) {
            fs.mkdirSync(projectName, { recursive: true });
        }
    };
    Ch5BaseClassForProject.prototype.isCreateOrUpdateBasedOnConfigJson = function () {
        return this.inputArgs["config"].inputValue !== "";
    };
    Ch5BaseClassForProject.prototype.getConfigJsonFilePath = function () {
        if (this._configFilePath === "") {
            this._configFilePath = path.resolve(this.inputArgs["config"].inputValue); // This is needed becos folder path can change in process
        }
        return this._configFilePath;
    };
    Ch5BaseClassForProject.prototype.getOutputResponse = function () {
        return this._outputResponse;
    };
    Ch5BaseClassForProject.prototype.getDateInStringFormat = function () {
        var currentDateTime = new Date();
        return String(currentDateTime.getFullYear()) + "-" + this.doubleDigit(currentDateTime.getMonth() + 1) + "-" + this.doubleDigit(currentDateTime.getDate()) + "-" + this.doubleDigit(currentDateTime.getHours()) + "-" + this.doubleDigit(currentDateTime.getMinutes()) + "-" + this.doubleDigit(currentDateTime.getSeconds());
    };
    Ch5BaseClassForProject.prototype.createBackupForExistingProject = function () {
        return __awaiter(this, void 0, void 0, function () {
            var folderNameForBackup, exportProject;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        folderNameForBackup = this.getDateInStringFormat();
                        this._outputResponse.data.backupFolder = path.normalize(path.join(this.getConfigNode("backupFolder"), folderNameForBackup));
                        // Step 3: Take back up of existing json and project
                        fsExtra.copySync(this.inputArgs["config"].inputValue, path.join(this.getConfigNode("backupFolder"), folderNameForBackup, "project-config.json"));
                        exportProject = new Ch5ExportProjectCli_1.Ch5ExportProjectCli(false);
                        exportProject.changeConfigParam("zipFileDestinationPath", path.join(this.getConfigNode("backupFolder"), folderNameForBackup));
                        return [4 /*yield*/, exportProject.run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Ch5BaseClassForProject.prototype.getConfirmation = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var askConfirmation, questionsArray;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        askConfirmation = false;
                        if (!(((_a = this.inputArgs["force"]) === null || _a === void 0 ? void 0 : _a.inputValue) === true)) return [3 /*break*/, 1];
                        askConfirmation = true;
                        return [3 /*break*/, 3];
                    case 1:
                        questionsArray = {
                            name: this.getText("VALIDATIONS.CONFIRMATION.TITLE"),
                            message: this.getText("VALIDATIONS.CONFIRMATION.ARE_YOU_SURE_TO_CHANGE"),
                            initial: true
                        };
                        return [4 /*yield*/, new this.getConfirm(questionsArray).run().then(function (response) {
                                return response;
                            }).catch(function (err) {
                                throw new Error(_this.getText("ERRORS.PROGRAM_STOPPED_OR_UNKNOWN_ERROR"));
                            })];
                    case 2:
                        askConfirmation = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, askConfirmation];
                }
            });
        });
    };
    Ch5BaseClassForProject.prototype.doubleDigit = function (input) {
        if (input < 10) {
            return "0" + String(input);
        }
        return String(input);
    };
    return Ch5BaseClassForProject;
}(Ch5BaseClassForCliCreate_1.Ch5BaseClassForCliCreate));
exports.Ch5BaseClassForProject = Ch5BaseClassForProject;
