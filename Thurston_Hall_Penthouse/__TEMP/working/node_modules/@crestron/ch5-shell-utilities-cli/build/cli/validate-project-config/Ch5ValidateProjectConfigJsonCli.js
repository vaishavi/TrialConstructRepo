"use strict";
// Copyright (C) 2021 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5ValidateProjectConfigCli = void 0;
var Ch5BaseClassForCli_1 = require("../Ch5BaseClassForCli");
var path_1 = __importDefault(require("path"));
var fs = require("fs");
var process = require("process");
var jsonSchema = require('jsonschema');
var Ch5ValidateProjectConfigCli = /** @class */ (function (_super) {
    __extends(Ch5ValidateProjectConfigCli, _super);
    function Ch5ValidateProjectConfigCli(showOutputMessages, exitProcess) {
        if (showOutputMessages === void 0) { showOutputMessages = true; }
        if (exitProcess === void 0) { exitProcess = true; }
        var _this = _super.call(this, "validate-project-config") || this;
        _this.showOutputMessages = showOutputMessages;
        _this.exitProcess = exitProcess;
        _this.errorsFound = [];
        _this.warningsFound = [];
        _this.projectConfigJson = {};
        _this.projectConfigJsonSchema = {};
        return _this;
    }
    /**
     * Method for validating project-config.json file
     */
    Ch5ValidateProjectConfigCli.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projectConfigObject, pagesArray, widgetsArray;
            return __generator(this, function (_a) {
                this.checkVersionToExecute();
                this.logger.log(this.getText("PROCESSING_MESSAGE"));
                this.clearErrors();
                this.clearWarnings();
                try {
                    this.projectConfigJson = JSON.parse(this.utils.readFileContentSync(this.getConfigNode("projectConfigJSONFile")));
                    this.projectConfigJsonSchema = JSON.parse(this.utils.readFileContentSync(this.getConfigNode("projectConfigJSONSchemaFile")));
                }
                catch (e) {
                    this.logger.log(e.message);
                    // Exit after printing both errors and warnings
                    this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, "Project Config JSON", e.message, "");
                }
                projectConfigObject = JSON.parse(JSON.stringify(this.projectConfigJson));
                pagesArray = projectConfigObject.content.pages;
                widgetsArray = projectConfigObject.content.widgets;
                // Validate schema - https://www.npmjs.com/package/jsonschema
                this.validateSchema();
                // Check pages
                this.verifyPagesExist(pagesArray);
                // Check widgets
                this.verifyWidgetsExist(widgetsArray);
                // Check repeated page names
                this.checkIfPagesAreRepeated(pagesArray);
                // Check if page names have been manually updated incorrectly
                this.verifyPageNameWithFileNames(pagesArray);
                // Check if widget names have been manually updated incorrectly
                this.verifyWidgetNameWithFileNames(widgetsArray);
                // Check if page folder path have been manually updated incorrectly
                this.verifyPageFolderPath(pagesArray);
                // Check if widget folder path have been manually updated incorrectly
                this.verifyWidgetFolderPath(widgetsArray);
                // Check repeated widget names
                this.checkIfWidgetsAreRepeated(widgetsArray);
                // Check page sequences
                this.checkPageSequence(pagesArray);
                // Check if theme name is Invalid
                this.checkInvalidSelectedTheme(projectConfigObject);
                // Check if theme name is duplicated in array
                this.checkIfThemeNamesAreRepeated(projectConfigObject.themes);
                // If menuOrientation is either vertical or horizontal , then check if atleast 1 navigation item exists in the list
                this.checkAtleastOneNavigationForMenu(pagesArray, projectConfigObject.menuOrientation);
                // Warning for iconPosition for vertical menu orientation
                this.checkIconPositionForVerticalMenu(pagesArray, projectConfigObject.menuOrientation);
                // Fix validate project config - We need to check menuOrientation="vertical" and header display="false" -
                this.checkHeaderAvailabilityForVerticalMenu(projectConfigObject.header.display, projectConfigObject.menuOrientation);
                // Pages array is empty
                this.checkIfNoPagesExist(pagesArray);
                // Check if response.content.$defaultView has valid input
                this.checkIfDefaultViewIsValid(projectConfigObject.content.$defaultView, pagesArray);
                // Check if forceDeviceXPanel is set to false for Zoom project
                this.checkIfForceDeviceXPanelForZoomRoomControl(projectConfigObject.forceDeviceXPanel, projectConfigObject.projectType);
                // Check if there are additional folders in the project which are not available in project-config.json and throw a warning
                // this.checkIfUnwantedFilesAndFoldersExist(pagesArray, "./app/project/components/pages/");
                // Check if there are additional folders in the project which are not available in project-config.json and throw a warning
                // this.checkIfUnwantedFilesAndFoldersExist(widgetsArray, "./app/project/components/widgets/");
                // Page and Widget Names collide
                this.checkIfPagesAndWidgetNamesDuplicate(pagesArray, widgetsArray);
                // Check if the header and footer components have navigation
                this.checkIfHeaderComponentsHaveNavigation(projectConfigObject, pagesArray, projectConfigObject.header.display, projectConfigObject.menuOrientation);
                // Check if the header and footer components have navigation
                this.checkIfFooterComponentsHaveNavigation(projectConfigObject, pagesArray, projectConfigObject.footer.display, projectConfigObject.menuOrientation);
                if (this.showOutputMessages === true) {
                    this.printOutputErrorsAndWarnings(this.getErrors(), this.getWarnings());
                }
                if (this.getErrors().length > 0) {
                    // Exit after printing both errors and warnings
                    if (this.exitProcess === true) {
                        process.exit(1);
                    }
                    return [2 /*return*/, false];
                }
                if (this.showOutputMessages === true) {
                    this.logger.printSuccess(this.getText("SUCCESS_MESSAGE"));
                }
                return [2 /*return*/, true];
            });
        });
    };
    Ch5ValidateProjectConfigCli.prototype.printOutputErrorsAndWarnings = function (errors, warnings) {
        if (errors.length > 0) {
            this.logger.printError(this.composeOutput(errors, this.getText("TYPE_ERROR")));
        }
        if (warnings.length > 0) {
            this.logger.printWarning(this.composeOutput(warnings, this.getText("TYPE_WARNING")));
        }
    };
    /**
     * Validating the schema file
     */
    Ch5ValidateProjectConfigCli.prototype.validateSchema = function () {
        var Validator = jsonSchema.Validator;
        var v = new Validator();
        var errors = v.validate(this.projectConfigJson, this.projectConfigJsonSchema).errors;
        var errorOrWarningTypeHeader = this.getText("VALIDATIONS.SCHEMA.HEADER");
        for (var i = 0; i < errors.length; i++) {
            this.logger.log("errors[i]", errors[i]);
            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningTypeHeader, errors[i].stack.toString().replace("instance.", ""), errors[i].schema.description);
        }
    };
    /**
     * Check if the pages defined in project-config.json exists in project
     */
    Ch5ValidateProjectConfigCli.prototype.verifyPagesExist = function (pagesArray) {
        for (var i = 0; i < pagesArray.length; i++) {
            var page = pagesArray[i];
            if (!(page.hasOwnProperty("pageName"))) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, this.getText("VALIDATIONS.PAGE_NAME_MISSING.HEADER", page.pageName), this.getText("VALIDATIONS.PAGE_NAME_MISSING.MESSAGE", page.fullPath, page.fileName), "");
            }
            else if (!fs.existsSync(page.fullPath)) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, this.getText("VALIDATIONS.PAGE_MISSING_FILE_FOLDER.HEADER", page.pageName), this.getText("VALIDATIONS.PAGE_MISSING_FILE_FOLDER.FOLDER_PATH_MISSING", page.fullPath, page.fileName), "");
            }
            else {
                if (!fs.existsSync(page.fullPath + page.fileName)) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, this.getText("VALIDATIONS.PAGE_MISSING_FILE_FOLDER.HEADER", page.pageName), this.getText("VALIDATIONS.PAGE_MISSING_FILE_FOLDER.FILE_NOT_IN_FOLDER", page.fileName, page.fullPath, page.pageName), "");
                }
            }
        }
    };
    /**
     * Check if the widgets defined in project-config.json exists in project
     */
    Ch5ValidateProjectConfigCli.prototype.verifyWidgetsExist = function (widgetsArray) {
        for (var i = 0; i < widgetsArray.length; i++) {
            var widget = widgetsArray[i];
            if (!(widget.hasOwnProperty("widgetName"))) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, this.getText("VALIDATIONS.WIDGET_NAME_MISSING.HEADER", widget.widgetName), this.getText("VALIDATIONS.WIDGET_NAME_MISSING.MESSAGE", widget.fullPath, widget.fileName), "");
            }
            else if (!fs.existsSync(widget.fullPath)) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, this.getText("VALIDATIONS.WIDGET_MISSING_FILE_FOLDER.HEADER", widget.widgetName), this.getText("VALIDATIONS.WIDGET_MISSING_FILE_FOLDER.FOLDER_PATH_MISSING", widget.fullPath, widget.fileName), "");
            }
            else {
                if (!fs.existsSync(widget.fullPath + widget.fileName)) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.ALL_RULES, this.getText("VALIDATIONS.WIDGET_MISSING_FILE_FOLDER.HEADER", widget.widgetName), this.getText("VALIDATIONS.WIDGET_MISSING_FILE_FOLDER.FILE_NOT_IN_FOLDER", widget.fileName, widget.fullPath, widget.widgetName), "");
                }
            }
        }
    };
    /**
     * Check if the selected theme is not empty and available in the list of themes
     */
    Ch5ValidateProjectConfigCli.prototype.checkInvalidSelectedTheme = function (projectConfigObject) {
        var isThemeAvailable = false;
        var errorOrWarningType = this.getText("VALIDATIONS.SELECTED_THEME_INCORRECT.HEADER");
        if (this.utils.isValidInput(projectConfigObject.selectedTheme)) {
            for (var i = 0; i < projectConfigObject.themes.length; i++) {
                if (projectConfigObject.selectedTheme.trim().toLowerCase() === projectConfigObject.themes[i].name.trim().toLowerCase()) {
                    if (projectConfigObject.selectedTheme !== projectConfigObject.themes[i].name) {
                        this.addWarning(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.SELECTED_THEME_INCORRECT.THEME_NAMING_STYLE", projectConfigObject.selectedTheme, projectConfigObject.themes[i].name), "");
                    }
                    isThemeAvailable = true;
                    break;
                }
            }
            if (isThemeAvailable === false) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.SELECTED_THEME_INCORRECT.THEME_NOT_IN_LIST", projectConfigObject.selectedTheme), "");
            }
        }
        else {
            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.SELECTED_THEME_INCORRECT.THEME_NOT_AVAILABLE"), "");
        }
    };
    Ch5ValidateProjectConfigCli.prototype.verifyPageFolderPath = function (pagesArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.INVALID_PAGE_FOLDER_PATH.HEADER");
        var pageFolderNamePath = "./app/project/components/pages/";
        for (var i = 0; i < pagesArray.length; i++) {
            var page = pagesArray[i];
            if (page.hasOwnProperty("fullPath")) {
                if (page.fullPath.toString().startsWith(pageFolderNamePath) === false) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.INVALID_PAGE_FOLDER_PATH.MESSAGE", page.fullPath), "");
                }
            }
        }
    };
    Ch5ValidateProjectConfigCli.prototype.verifyWidgetFolderPath = function (widgetArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.INVALID_WIDGET_FOLDER_PATH.HEADER");
        var widgetFolderNamePath = "./app/project/components/widgets/";
        for (var i = 0; i < widgetArray.length; i++) {
            var widget = widgetArray[i];
            if (widget.hasOwnProperty("fullPath")) {
                if (widget.fullPath.toString().startsWith(widgetFolderNamePath) === false) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.INVALID_WIDGET_FOLDER_PATH.MESSAGE", widget.fullPath), "");
                }
            }
        }
    };
    Ch5ValidateProjectConfigCli.prototype.verifyPageNameWithFileNames = function (pagesArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.INVALID_PAGE_WIDGET_NAMES.HEADER");
        for (var i = 0; i < pagesArray.length; i++) {
            var page = pagesArray[i];
            if (page.hasOwnProperty("pageName")) {
                var validatePageName = this.namingHelper.camelize(page.fileName.split(".")[0]);
                if (validatePageName !== page.pageName) {
                    this.logger.log("  validatePageName: ", validatePageName, page.pageName);
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.INVALID_PAGE_NAMES.MESSAGE", page.pageName, page.fileName), "");
                }
            }
        }
    };
    Ch5ValidateProjectConfigCli.prototype.verifyWidgetNameWithFileNames = function (widgetArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.INVALID_PAGE_WIDGET_NAMES.HEADER");
        for (var i = 0; i < widgetArray.length; i++) {
            var widget = widgetArray[i];
            if (widget.hasOwnProperty("widgetName")) {
                var validateWidgetName = this.namingHelper.camelize(widget.fileName.split(".")[0]);
                if (validateWidgetName !== widget.widgetName) {
                    this.logger.log("  validateWidgetName: ", validateWidgetName, widget.widgetName);
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.INVALID_WIDGET_NAMES.MESSAGE", widget.widgetName, widget.fileName), "");
                }
            }
        }
    };
    /**
     * Check if any other folders exist in the app which are not defined in project-config.json
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfPagesAreRepeated = function (pagesArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.PAGE_NAMES_REPEATED.HEADER");
        var newPageArray = [];
        for (var i = 0; i < pagesArray.length; i++) {
            var page = pagesArray[i];
            if (!(page.hasOwnProperty("pageName"))) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, this.getText("VALIDATIONS.PAGE_NAME_MISSING.HEADER", page.pageName), this.getText("VALIDATIONS.PAGE_NAME_MISSING.MESSAGE", page.fullPath, page.fileName), "");
            }
            else if (newPageArray.includes(page.pageName.trim().toLowerCase())) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.PAGE_NAMES_REPEATED.MESSAGE", page.pageName), "");
            }
            else {
                newPageArray.push(page.pageName.trim().toLowerCase());
            }
        }
    };
    /**
     * Check if any other folders exist in the app which are not defined in project-config.json
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfWidgetsAreRepeated = function (widgetsArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.WIDGET_NAMES_REPEATED.HEADER");
        var newWidgetArray = [];
        for (var i = 0; i < widgetsArray.length; i++) {
            var widget = widgetsArray[i];
            if (!(widget.hasOwnProperty("widgetName"))) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, this.getText("VALIDATIONS.WIDGET_NAME_MISSING.HEADER", widget.pageName), this.getText("VALIDATIONS.WIDGET_NAME_MISSING.MESSAGE", widget.fullPath, widget.fileName), "");
            }
            else if (newWidgetArray.includes(widget.widgetName.trim().toLowerCase())) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.PAGE_NAMES_REPEATED.MESSAGE", widget.widgetName), "");
            }
            else {
                newWidgetArray.push(widget.widgetName.trim().toLowerCase());
            }
        }
    };
    /**
     * Check if any other folders exist in the app which are not defined in project-config.json
     */
    Ch5ValidateProjectConfigCli.prototype.checkPageSequence = function (pagesArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.NAVIGATION_PAGE_SEQUENCE.HEADER");
        var newPageArraySequence = [];
        for (var i = 0; i < pagesArray.length; i++) {
            if (pagesArray[i].navigation) {
                if (newPageArraySequence.includes(pagesArray[i].navigation.sequence)) {
                    this.addWarning(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.NAVIGATION_PAGE_SEQUENCE.MESSAGE", pagesArray[i].pageName), "");
                }
                else {
                    newPageArraySequence.push(pagesArray[i].navigation.sequence);
                }
            }
        }
    };
    /**
     * Checks if the theme name is repeated in the themes array.
     * @param {*} pagesArray
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfThemeNamesAreRepeated = function (themes) {
        var errorOrWarningType = this.getText("VALIDATIONS.REPEATED_THEME_NAME_IN_ARRAY.HEADER");
        var newPageArraySequence = [];
        for (var i = 0; i < themes.length; i++) {
            if (newPageArraySequence.includes(themes[i].name)) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.REPEATED_THEME_NAME_IN_ARRAY.MESSAGE", themes[i].name), "");
            }
            else {
                newPageArraySequence.push(themes[i].name);
            }
        }
    };
    /**
     * If menuOrientation is either veritcal or horizontal , then check if atleast 1 navigation item exists in the list
     */
    Ch5ValidateProjectConfigCli.prototype.checkAtleastOneNavigationForMenu = function (pagesArray, menuOrientation) {
        if (menuOrientation === "horizontal" || menuOrientation === "vertical") {
            var errorOrWarningType = this.getText("VALIDATIONS.ATLEAST_ONE_MENU.HEADER");
            var menuCount = 0;
            for (var i = 0; i < pagesArray.length; i++) {
                if (pagesArray[i].navigation) {
                    menuCount++;
                }
            }
            if (menuCount === 0) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.ATLEAST_ONE_MENU.MESSAGE"), "");
            }
        }
    };
    /**
     * Warning for iconPosition for vertical menu orientation
     * @param {*} pagesArray
     * @param {*} menuOrientation
     */
    Ch5ValidateProjectConfigCli.prototype.checkIconPositionForVerticalMenu = function (pagesArray, menuOrientation) {
        if (menuOrientation === "vertical") {
            var errorOrWarningType = this.getText("VALIDATIONS.ICON_POSITION_VERTICAL.HEADER");
            for (var i = 0; i < pagesArray.length; i++) {
                if (pagesArray[i].navigation && pagesArray[i].navigation.iconPosition !== "") {
                    this.addWarning(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.ICON_POSITION_VERTICAL.MESSAGE"), "");
                    break;
                }
            }
        }
    };
    /**
     * Check if forceDeviceXPanel is set to false for zoom project
     * @param forceDeviceXPanel
     * @param projectType
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfForceDeviceXPanelForZoomRoomControl = function (forceDeviceXPanel, projectType) {
        if (projectType.toLowerCase() === "zoomroomcontrol" && forceDeviceXPanel === false) {
            var errorOrWarningType = this.getText("VALIDATIONS.FORCE_DEVICE_XPANEL.HEADER");
            this.addError(Ch5ValidateProjectConfigCli.RULES.POST_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.FORCE_DEVICE_XPANEL.MESSAGE"), "");
        }
    };
    /**
     * Check menuOrientation="vertical" and header display="false"
     * @param {*} pagesArray
     * @param {*} menuOrientation
     */
    Ch5ValidateProjectConfigCli.prototype.checkHeaderAvailabilityForVerticalMenu = function (headerDisplay, menuOrientation) {
        if (menuOrientation === "vertical" && headerDisplay === false) {
            var errorOrWarningType = this.getText("VALIDATIONS.VERTICAL_MENU_HEADER_AVAILABLE.HEADER");
            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.VERTICAL_MENU_HEADER_AVAILABLE.MESSAGE"), "");
        }
    };
    /**
     * Check if the header component has navigation
     * @param {*} projectConfigObject
     * @param {*} pagesArray
     * @param {*} headerDisplay
     * @param {*} menuOrientation
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfHeaderComponentsHaveNavigation = function (projectConfigObject, pagesArray, headerDisplay, menuOrientation) {
        if (menuOrientation !== "none" && headerDisplay === true) {
            var headerComponentName_1 = projectConfigObject.header["$component"];
            if (this.utils.isValidInput(headerComponentName_1)) {
                var errorOrWarningType = this.getText("VALIDATIONS.HEADER_COMPONENT_MISMATCH.HEADER");
                var getPageObject = pagesArray.find(function (tempObj) {
                    return tempObj.pageName.trim().toLowerCase() === headerComponentName_1.trim().toLowerCase();
                });
                if (getPageObject) {
                    if (getPageObject.navigation) {
                        // If navigation, then we have to throw error for now
                        this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.HEADER_COMPONENT_MISMATCH.ERROR_MESSAGE_NAVIGATION"), "");
                    }
                    else {
                        if (getPageObject.standAloneView === true) {
                            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.HEADER_COMPONENT_MISMATCH.ERROR_MESSAGE_STANDALONE_TRUE"), "");
                        }
                    }
                }
                else {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.HEADER_COMPONENT_MISMATCH.ERROR_MESSAGE_PAGE_MISSING"), "");
                }
            }
        }
    };
    /**
     * Check if the footer component has navigation
     * @param {*} projectConfigObject
     * @param {*} pagesArray
     * @param {*} footerDisplay
     * @param {*} menuOrientation
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfFooterComponentsHaveNavigation = function (projectConfigObject, pagesArray, footerDisplay, menuOrientation) {
        if (menuOrientation !== "none" && footerDisplay === true) {
            var footerComponentName_1 = projectConfigObject.footer["$component"];
            if (this.utils.isValidInput(footerComponentName_1)) {
                var errorOrWarningType = this.getText("VALIDATIONS.FOOTER_COMPONENT_MISMATCH.HEADER");
                var getPageObject = pagesArray.find(function (tempObj) {
                    return tempObj.pageName.trim().toLowerCase() === footerComponentName_1.trim().toLowerCase();
                });
                if (getPageObject) {
                    if (getPageObject.navigation) {
                        // If navigation, then we have to throw error for now
                        this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.FOOTER_COMPONENT_MISMATCH.ERROR_MESSAGE_NAVIGATION"), "");
                    }
                    else {
                        if (getPageObject.standAloneView === true) {
                            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.FOOTER_COMPONENT_MISMATCH.ERROR_MESSAGE_STANDALONE_TRUE"), "");
                        }
                    }
                }
                else {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.FOOTER_COMPONENT_MISMATCH.ERROR_MESSAGE_PAGE_MISSING"), "");
                }
            }
        }
    };
    /**
     * Pages array is empty
     * @param {*} pagesArray
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfNoPagesExist = function (pagesArray) {
        if (!(pagesArray && pagesArray.length > 0)) {
            var errorOrWarningType = this.getText("VALIDATIONS.EMPTY_PAGES_ARRAY.HEADER");
            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.EMPTY_PAGES_ARRAY.MESSAGE"), "");
        }
    };
    /**
     * Page and Widget Names collide
     * @param {*} pagesArray
     * @param {*} widgetsArray
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfPagesAndWidgetNamesDuplicate = function (pagesArray, widgetsArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.PAGE_AND_WIDGET_DUPLICATES.HEADER");
        for (var i = 0; i < pagesArray.length; i++) {
            for (var j = 0; j < widgetsArray.length; j++) {
                if (!(pagesArray[i].hasOwnProperty("pageName"))) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, this.getText("VALIDATIONS.PAGE_NAME_MISSING.HEADER", pagesArray[i].pageName), this.getText("VALIDATIONS.PAGE_NAME_MISSING.MESSAGE", pagesArray[i].fullPath, pagesArray[i].fileName), "");
                }
                else if (!(widgetsArray[j].hasOwnProperty("widgetName"))) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, this.getText("VALIDATIONS.WIDGET_NAME_MISSING.HEADER", widgetsArray[j].widgetName), this.getText("VALIDATIONS.WIDGET_NAME_MISSING.MESSAGE", widgetsArray[j].fullPath, widgetsArray[j].fileName), "");
                }
                else if (widgetsArray[j].widgetName.trim().toLowerCase() === pagesArray[i].pageName.trim().toLowerCase()) {
                    this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.PAGE_AND_WIDGET_DUPLICATES.MESSAGE", pagesArray[i].pageName, widgetsArray[j].widgetName), "");
                }
            }
        }
    };
    /**
     * Check if default view is valid
     * @param {*} pagesArray
     */
    //response.content.$defaultView
    Ch5ValidateProjectConfigCli.prototype.checkIfDefaultViewIsValid = function (defaultView, pagesArray) {
        var errorOrWarningType = this.getText("VALIDATIONS.DEFAULT_VIEW_INVALID.HEADER");
        if (defaultView && this.utils.isValidInput(defaultView)) {
            var defaultViewExists = false;
            for (var i = 0; i < pagesArray.length; i++) {
                if (pagesArray[i].pageName.trim().toLowerCase() === defaultView.trim().toLowerCase()) {
                    if (pagesArray[i].navigation) {
                        defaultViewExists = true;
                        break;
                    }
                    else {
                        // If no navigation, then we have to throw error for now
                        this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.DEFAULT_VIEW_INVALID.ERROR_MESSAGE_NO_NAVIGATION", defaultView), "");
                        return;
                    }
                }
            }
            if (defaultViewExists === false) {
                this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.DEFAULT_VIEW_INVALID.ERROR_MESSAGE", defaultView), "");
            }
        }
        else {
            this.addError(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.DEFAULT_VIEW_INVALID.WARNING_MESSAGE"), "");
        }
    };
    /**
     * Check if any other folders exist in the app which are not defined in project-config.json
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfUnwantedFilesAndFoldersExist = function (arrayObject, moveFrom) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        try {
                            // Get the files as an array
                            fs.promises.readdir(moveFrom).then(function (files) {
                                var _loop_1 = function (file) {
                                    // Get the full paths
                                    var fromPath = path_1.default.join(moveFrom, file);
                                    // Stat the file to see if we have a file or dir
                                    fs.promises.stat(fromPath).then(function (stat) {
                                        if (stat.isFile()) {
                                            _this.checkIfFileExists(arrayObject, fromPath);
                                        }
                                        else if (stat.isDirectory()) {
                                            _this.checkIfFolderExists(arrayObject, fromPath);
                                            _this.checkIfUnwantedFilesAndFoldersExist(arrayObject, fromPath);
                                        }
                                    });
                                };
                                // Loop them all with the new for...of
                                for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
                                    var file = files_1[_i];
                                    _loop_1(file);
                                } // End for...of
                                resolve();
                            });
                        }
                        catch (e) {
                            resolve();
                            // Catch anything bad that happens
                            // console.error("We've thrown! Whoops!", e);
                        }
                    })];
            });
        });
    };
    /**
     *
     * @param {*} objectArray
     * @param {*} filePath
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfFileExists = function (objectArray, filePath) {
        var newFilePath = "./" + filePath.trim().toLowerCase();
        var errorOrWarningType = this.getText("VALIDATIONS.PAGE_AND_WIDGET_DUPLICATES.MESSAGE");
        var lbnPathExists = false;
        for (var i = 0; i < objectArray.length; i++) {
            if (newFilePath === objectArray[i]["fullPath"].trim().toLowerCase() && objectArray[i]["fileName"].trim().toLowerCase()) {
                lbnPathExists = true;
                break;
            }
        }
        if (lbnPathExists === false) {
            this.addWarning(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.PAGE_AND_WIDGET_DUPLICATES.MESSAGE", newFilePath), "");
        }
    };
    /**
     *
     * @param {*} objectArray
     * @param {*} folderPath
     */
    Ch5ValidateProjectConfigCli.prototype.checkIfFolderExists = function (objectArray, folderPath) {
        var newFilePath = "./" + folderPath.trim().toLowerCase() + "/";
        var errorOrWarningType = this.getText("VALIDATIONS.PAGE_AND_WIDGET_DUPLICATES.MESSAGE");
        var lbnPathExists = false;
        for (var i = 0; i < objectArray.length; i++) {
            if (newFilePath === objectArray[i]["fullPath"].trim().toLowerCase()) {
                lbnPathExists = true;
                break;
            }
        }
        if (lbnPathExists === false) {
            this.addWarning(Ch5ValidateProjectConfigCli.RULES.PRE_BUILD_RULES, errorOrWarningType, this.getText("VALIDATIONS.PAGE_AND_WIDGET_DUPLICATES.MESSAGE", newFilePath), "");
        }
    };
    /**
     * Returns errors found
     */
    Ch5ValidateProjectConfigCli.prototype.getErrors = function () {
        return this.errorsFound;
    };
    /**
     * Clears the errors array
     */
    Ch5ValidateProjectConfigCli.prototype.clearErrors = function () {
        this.errorsFound = [];
    };
    /**
     * Adds error message to the array
     * @param {string} heading
     * @param {string} message
     * @param {string} resolution
     */
    Ch5ValidateProjectConfigCli.prototype.addError = function (type, heading, message, resolution) {
        var valueExists = false;
        if (this.errorsFound.length > 0) {
            for (var _i = 0, _a = this.errorsFound; _i < _a.length; _i++) {
                var item = _a[_i];
                if (message === item.message) {
                    valueExists = true;
                    break;
                }
            }
        }
        if (!valueExists) {
            this.errorsFound.push({
                type: type,
                heading: heading,
                message: message,
                resolution: resolution
            });
        }
    };
    /**
     * Returns warnings found
     */
    Ch5ValidateProjectConfigCli.prototype.getWarnings = function () {
        return this.warningsFound;
    };
    /**
     * Clears the warning array
     */
    Ch5ValidateProjectConfigCli.prototype.clearWarnings = function () {
        this.warningsFound = [];
    };
    /**
     * Adds warning message to the array
     * @param {string} heading
     * @param {string} message
     * @param {string} resolution
     */
    Ch5ValidateProjectConfigCli.prototype.addWarning = function (type, heading, message, resolution) {
        this.warningsFound.push({
            type: type,
            heading: heading,
            message: message,
            resolution: resolution
        });
    };
    /**
     * Composes the output message for errors
     * @param {array} dataArray
     * @param {string} type
     */
    Ch5ValidateProjectConfigCli.prototype.composeOutput = function (dataArray, type) {
        var outputMessage = this.getText("OUTPUT_ERROR_HEADER", type, String(dataArray.length)) + "\n";
        var tab = "    ";
        var numbering = 1;
        var previousOutputHeading = "";
        for (var i = 0; i < dataArray.length; i++) {
            if (previousOutputHeading !== dataArray[i].heading) {
                outputMessage += tab + String(numbering) + ". " + dataArray[i].heading + ": " + dataArray[i].message + "\n";
                numbering += 1;
            }
            if (dataArray[i].resolution && dataArray[i].resolution.trim() !== "") {
                outputMessage += tab + " (" + dataArray[i].resolution + ").\n";
            }
        }
        return outputMessage;
    };
    Ch5ValidateProjectConfigCli.RULES = {
        PRE_BUILD_RULES: "PRE_BUILD_RULES",
        POST_BUILD_RULES: "POST_BUILD_RULES",
        ALL_RULES: "ALL_RULES"
    };
    return Ch5ValidateProjectConfigCli;
}(Ch5BaseClassForCli_1.Ch5BaseClassForCli));
exports.Ch5ValidateProjectConfigCli = Ch5ValidateProjectConfigCli;
