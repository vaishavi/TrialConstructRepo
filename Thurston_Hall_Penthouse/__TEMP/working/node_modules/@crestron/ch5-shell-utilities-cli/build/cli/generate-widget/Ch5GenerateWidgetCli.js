"use strict";
// Copyright (C) 2021 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5GenerateWidgetCli = void 0;
var Ch5BaseClassForCli_1 = require("../Ch5BaseClassForCli");
var path = require('path');
var fs = require("fs");
var fsExtra = require("fs-extra");
var Ch5GenerateWidgetCli = /** @class */ (function (_super) {
    __extends(Ch5GenerateWidgetCli, _super);
    function Ch5GenerateWidgetCli(showOutputMessages) {
        if (showOutputMessages === void 0) { showOutputMessages = true; }
        var _this = _super.call(this, "generate-widget") || this;
        _this.showOutputMessages = showOutputMessages;
        /*
          - "basePathForWidgets": "./app/project/components/widgets/" - This indicates the path where the widget will be generated.
          - "templatesPath": "./ch5-shell-utilities-cli/src/cli/generate-widget/templates/" - This indicates the path where the templates can be found.
        */
        _this.MIN_LENGTH_OF_WIDGET_NAME = 2;
        _this.MAX_LENGTH_OF_WIDGET_NAME = 31;
        _this.outputResponse = {};
        return _this;
    }
    /**
     * Initialize
     */
    Ch5GenerateWidgetCli.prototype.initialize = function () {
        this.outputResponse = {
            result: false,
            errorMessage: "",
            warningMessage: "",
            data: {
                widgetName: "",
                fileName: "",
                folderPath: ""
            }
        };
    };
    /**
     * Method for generating page
     */
    Ch5GenerateWidgetCli.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, 4, 5]);
                        this.checkVersionToExecute();
                        // Initialize
                        this.initialize();
                        // Verify input params
                        this.verifyInputParams();
                        // Ask details to developer based on input parameter validation
                        return [4 /*yield*/, this.checkPromptQuestions()];
                    case 1:
                        // Ask details to developer based on input parameter validation
                        _a.sent();
                        // Update project-config first (so that if this fails, we don't worry about file deletion). Next Delete Files
                        return [4 /*yield*/, this.processRequest()];
                    case 2:
                        // Update project-config first (so that if this fails, we don't worry about file deletion). Next Delete Files
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1 && this.utils.isValidInput(e_1.message)) {
                            if (e_1.message.trim().toLowerCase() === 'error') {
                                this.outputResponse.errorMessage = this.getText("ERRORS.SOMETHING_WENT_WRONG");
                            }
                            else {
                                this.outputResponse.errorMessage = e_1.message;
                            }
                        }
                        else {
                            this.outputResponse.errorMessage = this.getText("ERRORS.SOMETHING_WENT_WRONG");
                            this.logger.log(e_1);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        // Clean up
                        this.cleanUp();
                        return [7 /*endfinally*/];
                    case 5:
                        // Show output response
                        this.logOutput();
                        return [2 /*return*/, this.outputResponse.result]; // The return is required to validate in automation test case
                }
            });
        });
    };
    /**
     * Verify input parameters
     */
    Ch5GenerateWidgetCli.prototype.verifyInputParams = function () {
        var tabDisplayText = this.getText("ERRORS.TAB_DELIMITER");
        if (this.utils.isValidInput(this.inputArguments["name"])) {
            var validationResponse = this.validateWidgetName(this.inputArguments["name"]);
            if (validationResponse === "") {
                this.outputResponse.data.widgetName = this.inputArguments["name"];
            }
            else {
                this.outputResponse.warningMessage += tabDisplayText + this.getText("ERRORS.WIDGET_NAME_INVALID_ENTRY", validationResponse);
            }
        }
        if (this.utils.isValidInput(this.outputResponse.warningMessage)) {
            if (this.showOutputMessages === true) {
                this.logger.printWarning(this.getText("ERRORS.MESSAGE_TITLE", this.outputResponse.warningMessage));
            }
        }
    };
    /**
     * Check if there are questions to be prompted to the developer
     */
    Ch5GenerateWidgetCli.prototype.checkPromptQuestions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widgets, newWidgetNameToSet, questionsArray, response, originalInputName;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.utils.isValidInput(this.outputResponse.data.widgetName)) return [3 /*break*/, 2];
                        widgets = this.projectConfig.getAllWidgets();
                        widgets = widgets.sort(this.utils.dynamicSort("asc", "widgetName"));
                        this.logger.log("widgets", widgets);
                        newWidgetNameToSet = this.loopAndCheckWidget(widgets);
                        questionsArray = [
                            {
                                type: "text",
                                name: "widgetName",
                                initial: newWidgetNameToSet,
                                hint: "",
                                message: this.getText("VALIDATIONS.GET_WIDGET_NAME"),
                                validate: function (compName) {
                                    var output = _this.validateWidgetName(compName);
                                    return output === "" ? true : output;
                                }
                            }
                        ];
                        return [4 /*yield*/, this.getEnquirer.prompt(questionsArray)];
                    case 1:
                        response = _a.sent();
                        if (!this.utils.isValidInput(response.widgetName)) {
                            throw new Error(this.getText("ERRORS.WIDGET_NAME_EMPTY_IN_REQUEST"));
                        }
                        this.logger.log("  response.widgetName: ", response.widgetName);
                        this.outputResponse.data.widgetName = response.widgetName;
                        _a.label = 2;
                    case 2:
                        originalInputName = this.namingHelper.convertMultipleSpacesToSingleSpace(this.outputResponse.data.widgetName.trim().toLowerCase());
                        this.outputResponse.data.widgetName = this.namingHelper.camelize(originalInputName);
                        this.logger.log("  this.outputResponse.data.widgetName: ", this.outputResponse.data.widgetName);
                        this.outputResponse.data.fileName = this.namingHelper.dasherize(originalInputName);
                        this.logger.log("  this.outputResponse.data.fileName: ", this.outputResponse.data.fileName);
                        if (!this.utils.isValidInput(this.outputResponse.data.widgetName)) {
                            throw new Error(this.getText("ERRORS.PROGRAM_STOPPED_OR_UNKNOWN_ERROR"));
                        }
                        else if (!this.utils.isValidInput(this.outputResponse.data.widgetName)) {
                            throw new Error(this.getText("ERRORS.WIDGET_NAME_EMPTY_IN_REQUEST"));
                        }
                        else if (!this.utils.isValidInput(this.outputResponse.data.fileName)) {
                            throw new Error(this.getText("ERRORS.SOMETHING_WENT_WRONG"));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Clean up
     */
    Ch5GenerateWidgetCli.prototype.cleanUp = function () {
        // Nothing to cleanup for this process
    };
    /**
     * Log Final Response Message
     */
    Ch5GenerateWidgetCli.prototype.logOutput = function () {
        if (this.showOutputMessages === true) {
            if (this.outputResponse.result === false) {
                this.logger.printError(this.outputResponse.errorMessage);
            }
            else {
                this.logger.printSuccess(this.getText("SUCCESS_MESSAGE", this.outputResponse.data.widgetName, this.outputResponse.data.folderPath));
                this.logger.printSuccess(this.getText("SUCCESS_MESSAGE_CONCLUSION"));
            }
        }
    };
    /**
     * Create Folder for the Widgets to be created
     */
    Ch5GenerateWidgetCli.prototype.createFolder = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isFolderCreated, fullPath, folderPath, folderPathSplit, i, previousPath, files, j, file, fileName;
            return __generator(this, function (_a) {
                isFolderCreated = false;
                fullPath = "";
                folderPath = this.getConfigNode("basePathForWidgets") + this.outputResponse.data.fileName + "/";
                folderPathSplit = folderPath.toString().split("/");
                for (i = 0; i < folderPathSplit.length; i++) {
                    this.logger.log(folderPathSplit[i]);
                    if (folderPathSplit[i] && folderPathSplit[i].trim() !== "") {
                        previousPath = fullPath;
                        fullPath += folderPathSplit[i] + "/";
                        if (!fs.existsSync(fullPath)) {
                            this.logger.log("Creating new folder " + folderPathSplit[i] + " inside the folder " + previousPath);
                            fs.mkdirSync(fullPath, {
                                recursive: true,
                            });
                            isFolderCreated = true;
                        }
                        else {
                            this.logger.log(fullPath + " exists !!!");
                        }
                    }
                }
                // Check if Folder exists
                if (isFolderCreated === false) {
                    files = fs.readdirSync(fullPath);
                    if (files.length === 0) {
                        // Check if folder is empty.
                        return [2 /*return*/, fullPath];
                    }
                    else {
                        // listing all files using forEach
                        for (j = 0; j < files.length; j++) {
                            file = files[j];
                            // If a single file exists, do not continue the process of generating widget
                            // If not, ensure to send message that folder is not empty but still created new files
                            this.logger.log(file);
                            fileName = this.outputResponse.data.fileName;
                            this.logger.log(fileName.toLowerCase() + ".html");
                            if (file.toLowerCase() === fileName.toLowerCase() + ".html" || file.toLowerCase() === fileName.toLowerCase() + ".scss" || file.toLowerCase() === fileName.toLowerCase() + ".js") {
                                throw new Error(this.getText("ERRORS.HTML_FILE_EXISTS", fileName.toLowerCase() + ".html", fullPath));
                            }
                        }
                        return [2 /*return*/, fullPath];
                    }
                }
                else {
                    return [2 /*return*/, fullPath];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Create New File based on templates
     * @param {string} fileExtension - File extension - applicable values are .html, .js, .scss
     * @param {string} templateFile - Template file name
     */
    Ch5GenerateWidgetCli.prototype.createNewFile = function (fileExtension, templateFile, fileNameSuffix) {
        return __awaiter(this, void 0, void 0, function () {
            var actualContent, completeFilePath;
            return __generator(this, function (_a) {
                if (templateFile !== "") {
                    actualContent = fsExtra.readFileSync(path.join(__dirname, "templates", templateFile));
                    actualContent = this.utils.replaceAll(actualContent, "<%widgetName%>", this.outputResponse.data.widgetName);
                    actualContent = this.utils.replaceAll(actualContent, "<%titleWidgetName%>", this.namingHelper.capitalizeEachWordWithSpaces(this.outputResponse.data.widgetName));
                    actualContent = this.utils.replaceAll(actualContent, "<%styleWidgetName%>", this.namingHelper.dasherize(this.outputResponse.data.widgetName));
                    actualContent = this.utils.replaceAll(actualContent, "<%copyrightYear%>", String(new Date().getFullYear()));
                    actualContent = this.utils.replaceAll(actualContent, "<%fileName%>", this.outputResponse.data.fileName);
                    completeFilePath = this.outputResponse.data.folderPath + this.outputResponse.data.fileName + fileNameSuffix + "." + fileExtension;
                    fsExtra.writeFileSync(completeFilePath, actualContent);
                    // Success case, the file was saved
                    this.logger.log("File contents saved!");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Creates the widget object in project-config.json.
     */
    Ch5GenerateWidgetCli.prototype.createWidgetObject = function () {
        var widgetObject = {
            "widgetName": this.outputResponse.data.widgetName,
            "fullPath": this.outputResponse.data.folderPath,
            "fileName": this.outputResponse.data.fileName + '.html'
        };
        return widgetObject;
    };
    /**
     * Method to validate Widget Name
     * @param {string} widgetName
     */
    Ch5GenerateWidgetCli.prototype.validateWidgetName = function (widgetName) {
        this.logger.log("widgetName to Validate", widgetName);
        if (this.utils.isValidInput(widgetName)) {
            widgetName = String(widgetName).trim();
            if (widgetName.length < this.MIN_LENGTH_OF_WIDGET_NAME || widgetName.length > this.MAX_LENGTH_OF_WIDGET_NAME) {
                return this.getText("ERRORS.WIDGET_NAME_LENGTH", String(this.MIN_LENGTH_OF_WIDGET_NAME), String(this.MAX_LENGTH_OF_WIDGET_NAME));
            }
            else {
                var widgetValidity = new RegExp(/^[a-zA-Z][a-zA-Z0-9-_ $]*$/).test(widgetName);
                if (widgetValidity === false) {
                    return this.getText("ERRORS.WIDGET_NAME_MANDATORY");
                }
                else {
                    var originalInputName = this.namingHelper.convertMultipleSpacesToSingleSpace(widgetName.trim().toLowerCase());
                    originalInputName = this.namingHelper.camelize(originalInputName);
                    this.logger.log("  originalInputName: " + originalInputName);
                    if (this.projectConfig.isWidgetExistInJSON(originalInputName)) {
                        return this.getText("ERRORS.WIDGET_EXISTS_IN_PROJECT_CONFIG_JSON");
                    }
                    else if (this.projectConfig.isPageExistInJSON(originalInputName)) {
                        return this.getText("ERRORS.PAGE_EXISTS_IN_PROJECT_CONFIG_JSON");
                    }
                    else if (this.checkWidgetNameForDisallowedKeywords(originalInputName, "startsWith") === true) {
                        return this.getText("ERRORS.WIDGET_CANNOT_START_WITH", this.getInvalidWidgetStartWithValues());
                    }
                    else if (this.checkWidgetNameForDisallowedKeywords(originalInputName, "equals") === true) {
                        return this.getText("ERRORS.WIDGET_DISALLOWED_KEYWORDS");
                    }
                    else {
                        return "";
                    }
                }
            }
        }
        else {
            return this.getText("ERRORS.WIDGET_NAME_MANDATORY");
        }
    };
    /**
     * Loop and check the next valid widget to set
     * @param {*} widgets
     */
    Ch5GenerateWidgetCli.prototype.loopAndCheckWidget = function (widgets) {
        var widgetFound = false;
        var newWidgetNameToSet = "";
        var i = 1;
        do {
            newWidgetNameToSet = "widget" + i;
            widgetFound = false;
            for (var j = 0; j < widgets.length; j++) {
                if (widgets[j].widgetName.trim().toLowerCase() === newWidgetNameToSet.toString().toLowerCase()) {
                    widgetFound = true;
                    break;
                }
            }
            i++;
        } while (widgetFound === true);
        return newWidgetNameToSet;
    };
    /**
     * Gets the keywords that are not allowed for widgets to start
     */
    Ch5GenerateWidgetCli.prototype.getInvalidWidgetStartWithValues = function () {
        var output = "";
        var templateNames = this.getConfigNode("templateNames");
        for (var i = 0; i < templateNames.disallowed["startsWith"].length; i++) {
            output += "'" + templateNames.disallowed["startsWith"][i] + "', ";
        }
        output = output.trim();
        return output.substr(0, output.length - 1);
    };
    /**
     * Checks if the widget name has disallowed keywords
     * @param {*} widgetName
     * @param {*} type
     */
    Ch5GenerateWidgetCli.prototype.checkWidgetNameForDisallowedKeywords = function (widgetName, type) {
        var templateNames = this.getConfigNode("templateNames");
        if (type === "startsWith") {
            for (var i = 0; i < templateNames.disallowed[type].length; i++) {
                if (widgetName.trim().toLowerCase().startsWith(templateNames.disallowed[type][i].trim().toLowerCase())) {
                    return true;
                }
            }
        }
        else if (type === "equals") {
            for (var i = 0; i < templateNames.disallowed[type].length; i++) {
                if (widgetName.trim().toLowerCase() === templateNames.disallowed[type][i].trim().toLowerCase()) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * Implement this component's main purpose
     */
    Ch5GenerateWidgetCli.prototype.processRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.projectConfig.isWidgetExistInJSON(this.outputResponse.data.widgetName)) return [3 /*break*/, 1];
                        throw new Error(this.getText("ERRORS.WIDGET_EXISTS_IN_PROJECT_CONFIG_JSON"));
                    case 1: return [4 /*yield*/, this.createFolder().then(function (folderPathResponseGenerated) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.logger.log("  Folder Path (generated): " + folderPathResponseGenerated);
                                        this.outputResponse.data.folderPath = folderPathResponseGenerated;
                                        if (!this.utils.isValidInput(this.outputResponse.data.folderPath)) return [3 /*break*/, 5];
                                        return [4 /*yield*/, this.createNewFile("html", "html.template", "")];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, this.createNewFile("js", "js.template", "")];
                                    case 2:
                                        _a.sent();
                                        return [4 /*yield*/, this.createNewFile("scss", "scss.template", "")];
                                    case 3:
                                        _a.sent();
                                        return [4 /*yield*/, this.createNewFile("json", "emulator.template", "-emulator")];
                                    case 4:
                                        _a.sent();
                                        this.projectConfig.saveWidgetToJSON(this.createWidgetObject());
                                        this.outputResponse.result = true;
                                        return [3 /*break*/, 6];
                                    case 5: throw new Error(this.getText("ERRORS.ERROR_IN_FOLDER_PATH"));
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); }).catch(function (err) {
                            throw new Error(err);
                        })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Ch5GenerateWidgetCli;
}(Ch5BaseClassForCli_1.Ch5BaseClassForCli));
exports.Ch5GenerateWidgetCli = Ch5GenerateWidgetCli;
