"use strict";
// Copyright (C) 2023 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5CreateProjectCli = void 0;
var Ch5BaseClassForProject_1 = require("../base-classes/Ch5BaseClassForProject");
var Ch5GeneratePageCli_1 = require("../generate-page/Ch5GeneratePageCli");
var Ch5GenerateWidgetCli_1 = require("../generate-widget/Ch5GenerateWidgetCli");
var Ch5CreateProjectCli = /** @class */ (function (_super) {
    __extends(Ch5CreateProjectCli, _super);
    /**
     * Constructor
     */
    function Ch5CreateProjectCli(showOutputMessages) {
        if (showOutputMessages === void 0) { showOutputMessages = true; }
        var _this = _super.call(this) || this;
        _this.showOutputMessages = showOutputMessages;
        return _this;
    }
    /**
     * Verify input parameters
     */
    Ch5CreateProjectCli.prototype.verifyInputParams = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.start("verifyInputParams");
                        this.logger.log("verifyInputParams - this.inputArgs: ", this.inputArgs);
                        if (!this.isCreateOrUpdateBasedOnConfigJson()) return [3 /*break*/, 2];
                        // Step 1: Check file extension for json, valid input for 'config' argument, and config file existence
                        if (!(this.utils.isValidInput(this.getConfigJsonFilePath()) && this.isConfigFileExist(this.getConfigJsonFilePath()))) {
                            throw new Error(this.getText("VERIFY_INPUT_PARAMS.INVALID_CONFIG_INPUT"));
                        }
                        return [4 /*yield*/, this.isConfigFileValid(this.getConfigJsonFilePath(), this.getConfigFileSchemaPath(), true)];
                    case 1:
                        // Step 2: Check if json is as per its schema (.vscode is hidden folder)
                        if (!(_a.sent())) {
                            throw new Error(this.getText("VERIFY_INPUT_PARAMS.INVALID_CONFIG_FILE"));
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        this.logger.log("Project that does not use config json file");
                        this.validateAndSetReceivedInputValues();
                        this.printWarningsOnVerifiedInputs();
                        _a.label = 3;
                    case 3:
                        this.logger.end();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Check if there are questions to be prompted to the integrator
     */
    Ch5CreateProjectCli.prototype.checkPromptQuestions = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.start("checkPromptQuestions");
                        if (!this.isCreateOrUpdateBasedOnConfigJson()) return [3 /*break*/, 1];
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.askQuestionsToUser("create")];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.logger.end();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Implement this component's main purpose
     */
    Ch5CreateProjectCli.prototype.processRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var workingDirectory, e_1, inputConfigJSON, templateConfigJSON, k, pagesToBeCreated, _loop_1, i, widgetsToBeCreated, _loop_2, i, i, genPage, newPageName, i, genWidget, newWidgetName, templateConfigJSON, forceDeviceXPanelObject, defaultPageName, defaultPageMenuValue, genPage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.start("processRequest");
                        this.logger.log("processRequest - this._outputResponse.data.updatedInputs: ", this.getOutputResponse().data.updatedInputs);
                        workingDirectory = this.getCurrentWorkingDirectory();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.traverseAndValidateProjectFolderAndVariables()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new Error(e_1.message);
                    case 4:
                        this.copyShellFolderContentsToProjectFolder();
                        this.setFilesAsPerProjectType();
                        this.renamePackageJsonFile();
                        if (!this.isCreateOrUpdateBasedOnConfigJson()) return [3 /*break*/, 13];
                        inputConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getConfigJsonFilePath()));
                        templateConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getShellTemplateProjectConfigPath()));
                        // 1. Project Data
                        for (k in inputConfigJSON) {
                            if ((typeof inputConfigJSON[k] !== 'object' && inputConfigJSON[k] !== null)) {
                                if (templateConfigJSON[k] !== inputConfigJSON[k]) {
                                    templateConfigJSON[k] = inputConfigJSON[k];
                                    this.projectConfig.changeNodeValues(k, templateConfigJSON[k]);
                                }
                            }
                        }
                        if (this.getOutputResponse().data.projectType.toLowerCase() === "zoomroomcontrol") {
                            this.makeProjectConfigJsonChangesForZoom();
                        }
                        // 2. Themes
                        templateConfigJSON["themes"] = inputConfigJSON["themes"];
                        this.projectConfig.changeNodeValues("themes", templateConfigJSON["themes"]);
                        // 3. Config
                        templateConfigJSON["config"] = inputConfigJSON["config"];
                        this.projectConfig.changeNodeValues("config", templateConfigJSON["config"]);
                        // 4. Header
                        templateConfigJSON["header"] = inputConfigJSON["header"];
                        this.projectConfig.changeNodeValues("header", templateConfigJSON["header"]);
                        // 5. Footer
                        templateConfigJSON["footer"] = inputConfigJSON["footer"];
                        this.projectConfig.changeNodeValues("footer", templateConfigJSON["footer"]);
                        // 6. Content
                        templateConfigJSON["content"]["triggerViewProperties"] = inputConfigJSON["content"]["triggerViewProperties"];
                        this.projectConfig.changeNodeValues("content.triggerViewProperties", templateConfigJSON["content"]["triggerViewProperties"]);
                        // 7. Custom Signal
                        templateConfigJSON["customSignals"] = inputConfigJSON["customSignals"];
                        this.projectConfig.changeNodeValues("customSignals", templateConfigJSON["customSignals"]);
                        templateConfigJSON["content"]["$defaultView"] = inputConfigJSON["content"]["$defaultView"];
                        this.projectConfig.changeNodeValues("content.$defaultView", templateConfigJSON["content"]["$defaultView"]);
                        pagesToBeCreated = [];
                        _loop_1 = function (i) {
                            var pageObj = inputConfigJSON["content"]["pages"][i];
                            var pageInOldSet = templateConfigJSON["content"]["pages"].find(function (page) { return page.pageName.toString().toLowerCase() === pageObj.pageName.toString().toLowerCase(); });
                            if (!pageInOldSet) {
                                // Exists in New set but not in old - so create page
                                pagesToBeCreated.push(pageObj);
                            }
                        };
                        for (i = 0; i < inputConfigJSON["content"]["pages"].length; i++) {
                            _loop_1(i);
                        }
                        widgetsToBeCreated = [];
                        _loop_2 = function (i) {
                            var widgetObj = inputConfigJSON["content"]["widgets"][i];
                            var pageInOldSet = templateConfigJSON["content"]["widgets"].find(function (widget) { return widget.widgetName.toString().toLowerCase() === widgetObj.widgetName.toString().toLowerCase(); });
                            if (!pageInOldSet) {
                                // Exists in New set but not in old - so create page
                                widgetsToBeCreated.push(widgetObj);
                            }
                        };
                        for (i = 0; i < inputConfigJSON["content"]["widgets"].length; i++) {
                            _loop_2(i);
                        }
                        this.setValueInPackageJson("name", templateConfigJSON.projectName);
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < pagesToBeCreated.length)) return [3 /*break*/, 8];
                        genPage = new Ch5GeneratePageCli_1.Ch5GeneratePageCli(false);
                        newPageName = pagesToBeCreated[i].fileName.toLowerCase().split(".")[0];
                        genPage.setInputArgsForTesting(["-n", newPageName, "-m", pagesToBeCreated[i].navigation ? "Y" : "N"]);
                        return [4 /*yield*/, genPage.run()];
                    case 6:
                        _a.sent();
                        this.projectConfig.replacePageNodeInJSON(pagesToBeCreated[i]);
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 5];
                    case 8:
                        i = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i < widgetsToBeCreated.length)) return [3 /*break*/, 12];
                        genWidget = new Ch5GenerateWidgetCli_1.Ch5GenerateWidgetCli(false);
                        newWidgetName = widgetsToBeCreated[i].fileName.toLowerCase().split(".")[0];
                        genWidget.setInputArgsForTesting(["-n", newWidgetName]);
                        return [4 /*yield*/, genWidget.run()];
                    case 10:
                        _a.sent();
                        this.projectConfig.removeWidgetFromJSON(widgetsToBeCreated[i]);
                        _a.label = 11;
                    case 11:
                        i++;
                        return [3 /*break*/, 9];
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        templateConfigJSON = JSON.parse(this.utils.readFileContentSync(this.getShellTemplateProjectConfigPath()));
                        if (this.getOutputResponse().data.projectType.toLowerCase() === "zoomroomcontrol") {
                            this.makeProjectConfigJsonChangesForZoom();
                        }
                        else {
                            forceDeviceXPanelObject = this.getOutputResponse().data.updatedInputs.find(function (objValue) { return objValue.key === "forceDeviceXPanel"; });
                            templateConfigJSON["forceDeviceXPanel"] = forceDeviceXPanelObject.argsValue;
                            this.projectConfig.changeNodeValues("forceDeviceXPanel", templateConfigJSON["forceDeviceXPanel"]);
                        }
                        this.projectConfig.changeNodeValues("projectName", this.getOutputResponse().data.projectName);
                        this.projectConfig.changeNodeValues("projectType", this.getOutputResponse().data.projectType);
                        this.setValueInPackageJson("name", this.getOutputResponse().data.projectName);
                        defaultPageName = "page1";
                        defaultPageMenuValue = "Y";
                        genPage = new Ch5GeneratePageCli_1.Ch5GeneratePageCli(false);
                        genPage.setInputArgsForTesting(["-n", defaultPageName, "-m", defaultPageMenuValue]);
                        return [4 /*yield*/, genPage.run()];
                    case 14:
                        _a.sent();
                        templateConfigJSON["content"]["$defaultView"] = defaultPageName;
                        this.projectConfig.changeNodeValues("content.$defaultView", templateConfigJSON["content"]["$defaultView"]);
                        _a.label = 15;
                    case 15: return [4 /*yield*/, this.isConfigFileValid(this.getCreatedOrUpdateProjectPathProjectConfigJsonFile(), this.getCreatedOrUpdateProjectPathProjectConfigJsonSchemaFile())];
                    case 16:
                        // Step 6: Run validate:project-config
                        if (!(_a.sent())) {
                            throw new Error(this.getText("PROCESS_REQUEST.PROJECT_CONFIG_VALIDATION_FAILED"));
                        }
                        // Step 7: Show proper messages  
                        this.getOutputResponse().result = true;
                        this.getOutputResponse().successMessage = this.getText("LOG_OUTPUT.SUCCESS_MESSAGE", this.getOutputResponse().data.projectName, workingDirectory);
                        this.logger.end();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Do not move this method to base class
     * @returns
     */
    Ch5CreateProjectCli.prototype.getCLIExecutionPath = function () {
        // This method needs to be available here in order to get the current working directory
        return __dirname;
    };
    Ch5CreateProjectCli.prototype.makeProjectConfigJsonChangesForZoom = function () {
        this.projectConfig.changeNodeValues("forceDeviceXPanel", true);
        this.projectConfig.changeNodeValues("menuOrientation", "none");
        this.projectConfig.changeNodeValues("selectedTheme", "zoom-light-theme");
        var getProjectThemes = this.projectConfig.getNodeByKey("themes");
        var isZoomLightThemeAvailable = getProjectThemes.filter(function (theme) { return theme.name === "zoom-light-theme"; });
        if (isZoomLightThemeAvailable.length === 0) {
            var zoomLightTheme = {
                "name": "zoom-light-theme",
                "extends": "zoom-light-theme",
                "brandLogo": {
                    "url": "./app/template/assets/img/ch5-logo-light.svg",
                    "alt": "Crestron Logo",
                    "receiveStateUrl": ""
                },
                "backgroundProperties": {
                    "backgroundColor": [
                        "#ffffff"
                    ]
                }
            };
            getProjectThemes.push(zoomLightTheme);
            this.projectConfig.changeNodeValues("themes", getProjectThemes);
        }
        var isZoomDarkThemeAvailable = getProjectThemes.filter(function (theme) { return theme.name === "zoom-dark-theme"; });
        if (isZoomDarkThemeAvailable.length === 0) {
            var zoomDarkTheme = {
                "name": "zoom-dark-theme",
                "extends": "zoom-dark-theme",
                "brandLogo": {
                    "url": "./app/template/assets/img/ch5-logo-dark.svg",
                    "alt": "Crestron Logo",
                    "receiveStateUrl": ""
                },
                "backgroundProperties": {
                    "backgroundColor": [
                        "#242424"
                    ]
                }
            };
            getProjectThemes.push(zoomDarkTheme);
            this.projectConfig.changeNodeValues("themes", getProjectThemes);
        }
        var getHeader = this.projectConfig.getNodeByKey("header");
        getHeader.display = false;
        this.projectConfig.changeNodeValues("header", getHeader);
        var getFooter = this.projectConfig.getNodeByKey("footer");
        getFooter.display = false;
        this.projectConfig.changeNodeValues("footer", getFooter);
    };
    return Ch5CreateProjectCli;
}(Ch5BaseClassForProject_1.Ch5BaseClassForProject));
exports.Ch5CreateProjectCli = Ch5CreateProjectCli;
