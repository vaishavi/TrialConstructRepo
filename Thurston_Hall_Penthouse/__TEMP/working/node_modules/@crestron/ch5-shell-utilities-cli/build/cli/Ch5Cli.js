"use strict";
// Copyright (C) 2021 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5ShellCli = void 0;
var commander_1 = __importDefault(require("commander"));
var Ch5GeneratePageCli_1 = require("./generate-page/Ch5GeneratePageCli");
var Ch5GenerateWidgetCli_1 = require("./generate-widget/Ch5GenerateWidgetCli");
var Ch5ExportProjectCli_1 = require("./export-project/Ch5ExportProjectCli");
var Ch5DeleteComponentsCli_1 = require("./delete-components/Ch5DeleteComponentsCli");
var Ch5ExportAllCli_1 = require("./export-all/Ch5ExportAllCli");
var Ch5ExportLibrariesCli_1 = require("./export-libraries/Ch5ExportLibrariesCli");
var Ch5ExportAssetsCli_1 = require("./export-assets/Ch5ExportAssetsCli");
var Ch5ExportComponentsCli_1 = require("./export-components/Ch5ExportComponentsCli");
var Ch5ImportAssetsCli_1 = require("./import-assets/Ch5ImportAssetsCli");
var Ch5ImportLibrariesCli_1 = require("./import-libraries/Ch5ImportLibrariesCli");
var Ch5ImportComponentsCli_1 = require("./import-components/Ch5ImportComponentsCli");
var Ch5ImportAllCli_1 = require("./import-all/Ch5ImportAllCli");
var Ch5ValidateProjectConfigJsonCli_1 = require("./validate-project-config/Ch5ValidateProjectConfigJsonCli");
var Ch5UpdateProjectCli_1 = require("./update-project/Ch5UpdateProjectCli");
var Ch5CreateProjectCli_1 = require("./create-project/Ch5CreateProjectCli");
var Ch5UpgradeProjectCli_1 = require("./upgrade-project/Ch5UpgradeProjectCli");
var packageJson = require('../../package.json');
var buildVersion = packageJson.version || 'VERSION_NOT_READ';
var Ch5ShellCli = /** @class */ (function () {
    function Ch5ShellCli() {
        this.createProject = new Ch5CreateProjectCli_1.Ch5CreateProjectCli();
        this.deleteComponents = new Ch5DeleteComponentsCli_1.Ch5DeleteComponentsCli();
        this.exportAll = new Ch5ExportAllCli_1.Ch5ExportAllCli();
        this.exportAssets = new Ch5ExportAssetsCli_1.Ch5ExportAssetsCli();
        this.exportComponents = new Ch5ExportComponentsCli_1.Ch5ExportComponentsCli();
        this.exportLibraries = new Ch5ExportLibrariesCli_1.Ch5ExportLibrariesCli();
        this.exportProject = new Ch5ExportProjectCli_1.Ch5ExportProjectCli();
        this.generatePage = new Ch5GeneratePageCli_1.Ch5GeneratePageCli();
        this.generateWidget = new Ch5GenerateWidgetCli_1.Ch5GenerateWidgetCli();
        this.importAll = new Ch5ImportAllCli_1.Ch5ImportAllCli();
        this.importAssets = new Ch5ImportAssetsCli_1.Ch5ImportAssetsCli();
        this.importComponents = new Ch5ImportComponentsCli_1.Ch5ImportComponentsCli();
        this.importLibraries = new Ch5ImportLibrariesCli_1.Ch5ImportLibrariesCli();
        this.updateProject = new Ch5UpdateProjectCli_1.Ch5UpdateProjectCli();
        this.upgradeProject = new Ch5UpgradeProjectCli_1.Ch5UpgradeProjectCli();
        this.validateProjectConfig = new Ch5ValidateProjectConfigJsonCli_1.Ch5ValidateProjectConfigCli();
    }
    Ch5ShellCli.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var program;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        program = new commander_1.default.Command();
                        program
                            .name("ch5-shell-cli")
                            .version(buildVersion)
                            .description("CH5 Shell Utilities CLI")
                            .addHelpText('after', "\n  Ch5 Shell CLI Version: ".concat(buildVersion, "\n  Minimum node version required for CLI: v").concat(this.createProject.configFileReader.configFile.settings.minimumNodeVersion, "\n  Minimum npm version required for CLI: v").concat(this.createProject.configFileReader.configFile.settings.minimumNPMVersion, "\n      "));
                        // This adds a nice fancy ch5-shell-cli in console whenever a command is executed.
                        // console.log(
                        //   chalk.greenBright(
                        //     figlet.textSync('ch5-shell-cli', { horizontalLayout: 'controlled smushing' })
                        //   )
                        // );
                        return [4 /*yield*/, this.createProject.setupCommand(program)];
                    case 1:
                        // This adds a nice fancy ch5-shell-cli in console whenever a command is executed.
                        // console.log(
                        //   chalk.greenBright(
                        //     figlet.textSync('ch5-shell-cli', { horizontalLayout: 'controlled smushing' })
                        //   )
                        // );
                        _a.sent();
                        return [4 /*yield*/, this.deleteComponents.setupCommand(program)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.exportAll.setupCommand(program)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.exportAssets.setupCommand(program)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.exportComponents.setupCommand(program)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.exportLibraries.setupCommand(program)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.exportProject.setupCommand(program)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.generatePage.setupCommand(program)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.generateWidget.setupCommand(program)];
                    case 9:
                        _a.sent();
                        return [4 /*yield*/, this.importAll.setupCommand(program)];
                    case 10:
                        _a.sent();
                        return [4 /*yield*/, this.importAssets.setupCommand(program)];
                    case 11:
                        _a.sent();
                        return [4 /*yield*/, this.importComponents.setupCommand(program)];
                    case 12:
                        _a.sent();
                        return [4 /*yield*/, this.importLibraries.setupCommand(program)];
                    case 13:
                        _a.sent();
                        return [4 /*yield*/, this.updateProject.setupCommand(program)];
                    case 14:
                        _a.sent();
                        return [4 /*yield*/, this.upgradeProject.setupCommand(program)];
                    case 15:
                        _a.sent();
                        return [4 /*yield*/, this.validateProjectConfig.setupCommand(program)];
                    case 16:
                        _a.sent();
                        // error on unknown command
                        program.on('command:*', function () {
                            console.error('Invalid command: %s\nSee --help for a list of available commands.', program.args.join(' '));
                            process.exit(1);
                        });
                        program.parse(process.argv);
                        return [2 /*return*/];
                }
            });
        });
    };
    return Ch5ShellCli;
}());
exports.Ch5ShellCli = Ch5ShellCli;
