"use strict";
// Copyright (C) 2021 to the present, Crestron Electronics, Inc.
// All rights reserved.
// No part of this software may be reproduced in any form, machine
// or natural, without the express written consent of Crestron Electronics.
// Use of this source code is subject to the terms of the Crestron Software License Agreement
// under which you licensed this source code.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ch5CliProjectConfig = void 0;
var Ch5CliUtil_1 = require("./Ch5CliUtil");
var Ch5CliLogger_1 = require("./Ch5CliLogger");
var fs = require("fs");
var editJsonFile = require("edit-json-file");
var fsExtra = require("fs-extra");
var Ch5CliProjectConfig = /** @class */ (function () {
    function Ch5CliProjectConfig() {
        this.PROJECT_CONFIG_PATH = "./app/project-config.json";
        this._cliUtil = new Ch5CliUtil_1.Ch5CliUtil();
        this._cliLogger = new Ch5CliLogger_1.Ch5CliLogger();
    }
    Ch5CliProjectConfig.prototype.getJson = function () {
        return fsExtra.readJSONSync(this.PROJECT_CONFIG_PATH);
    };
    Ch5CliProjectConfig.prototype.getAllPages = function () {
        var projectConfigObject = this.getJson();
        return projectConfigObject.content.pages;
    };
    Ch5CliProjectConfig.prototype.getAllWidgets = function () {
        var projectConfigObject = this.getJson();
        return projectConfigObject.content.widgets;
    };
    Ch5CliProjectConfig.prototype.getAllPagesAndWidgets = function () {
        var projectConfigObject = this.getJson();
        var output = [];
        for (var i = 0; i < projectConfigObject.content.pages.length; i++) {
            output.push({ index: i, name: projectConfigObject.content.pages[i].pageName, component: projectConfigObject.content.pages[i], type: "page" });
        }
        for (var i = 0; i < projectConfigObject.content.widgets.length; i++) {
            output.push({ index: i + projectConfigObject.content.pages.length, name: projectConfigObject.content.widgets[i].widgetName, component: projectConfigObject.content.widgets[i], type: "widget" });
        }
        return output;
    };
    Ch5CliProjectConfig.prototype.getAllNavigations = function () {
        var _this = this;
        var pages = this.getAllPages();
        var navigations = pages.filter(function (pageObj) {
            return _this._cliUtil.isValidObject(pageObj.navigation);
        });
        return navigations;
    };
    Ch5CliProjectConfig.prototype.getAllThemeNames = function () {
        var projectConfigObject = this.getJson();
        var themeNames = projectConfigObject.themes.map(function (theme) {
            return theme.name;
        });
        return themeNames;
    };
    Ch5CliProjectConfig.prototype.getAllThemes = function () {
        var projectConfigObject = this.getJson();
        return projectConfigObject.themes;
    };
    Ch5CliProjectConfig.prototype.getAllStandalonePages = function () {
        var _this = this;
        var pages = this.getAllPages();
        var navigations = pages.filter(function (pageObj) {
            return !_this._cliUtil.isValidObject(pageObj.navigation);
        });
        return navigations;
    };
    Ch5CliProjectConfig.prototype.getHighestNavigationSequence = function () {
        var pages = this.getAllNavigations();
        pages = pages.sort(this._cliUtil.dynamicSort("desc", "navigation", "sequence"));
        if (pages && pages[0] && pages[0].navigation && pages[0].navigation.sequence) {
            return pages[0].navigation.sequence;
        }
        else {
            return 0;
        }
    };
    Ch5CliProjectConfig.prototype.removePageFromJSON = function (pageName) {
        try {
            var pageList = this.getAllPages();
            var pageListNew = [];
            for (var i = 0; i < pageList.length; i++) {
                if (pageList[i].pageName.toString().toLowerCase() !== pageName.toString().toLowerCase()) {
                    pageListNew.push(pageList[i]);
                }
            }
            this._cliLogger.log("pageName", pageName);
            this.changeNodeValues("content.pages", pageListNew);
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.removeWidgetFromJSON = function (widgetName) {
        try {
            var widgetList = this.getAllWidgets();
            var widgetListNew = [];
            for (var i = 0; i < widgetList.length; i++) {
                if (widgetList[i].widgetName.toString().toLowerCase() !== widgetName.toString().toLowerCase()) {
                    widgetListNew.push(widgetList[i]);
                }
            }
            this._cliLogger.log("widgetName", widgetName);
            this.changeNodeValues("content.widgets", widgetListNew);
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.savePageToJSON = function (pageObject) {
        try {
            var pagesList = this.getAllPages();
            pagesList.push(pageObject);
            this._cliLogger.log("pageObject", pageObject);
            this.changeNodeValues("content.pages", pagesList);
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.replacePageNodeInJSON = function (pageObject) {
        try {
            var pagesList = this.getAllPages();
            var setPageIndex = pagesList.findIndex(function (page) { return page.pageName.toString().toLowerCase() === pageObject.pageName.toString().toLowerCase(); });
            if (setPageIndex >= 0) {
                pagesList[setPageIndex] = pageObject;
                this._cliLogger.log("pagesList", pagesList);
                this.changeNodeValues("content.pages", pagesList);
            }
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.replaceWidgetNodeInJSON = function (widgetObject) {
        try {
            var widgetsList = this.getAllWidgets();
            var setWidgetIndex = widgetsList.findIndex(function (widget) { return widget.widgetName.toString().toLowerCase() === widgetObject.widgetName.toString().toLowerCase(); });
            if (setWidgetIndex >= 0) {
                widgetsList[setWidgetIndex] = widgetObject;
                this._cliLogger.log("widgetsList", widgetsList);
                this.changeNodeValues("content.widgets", widgetsList);
            }
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.saveOverrideAttributeToJSON = function (attributeName, attributeData) {
        try {
            this.changeNodeValues(attributeName, attributeData);
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.addPagesToJSON = function (pageArrayInput) {
        try {
            if (pageArrayInput && pageArrayInput.length > 0) {
                var newStartingNavigationSequence = this.getHighestNavigationSequence();
                var pagesList = JSON.parse(JSON.stringify(this.getAllPages()));
                var newPageList = this.getAllPages();
                var _loop_1 = function (i) {
                    var isFileExisting = false;
                    var pageListIndex = -1;
                    for (var j = 0; j < pagesList.length; j++) {
                        if (pagesList[j].pageName.trim().toLowerCase() === pageArrayInput[i].pageName.trim().toLowerCase()) {
                            isFileExisting = true;
                            pageListIndex = j;
                            break;
                        }
                    }
                    if (isFileExisting === false) {
                        if (pageArrayInput[i].navigation) {
                            newStartingNavigationSequence += 1;
                            pageArrayInput[i].navigation.sequence = newStartingNavigationSequence;
                        }
                        newPageList.push(pageArrayInput[i]);
                    }
                    else {
                        var objIndex = newPageList.findIndex(function (obj) { return obj.pageName.trim().toLowerCase() === pageArrayInput[i].pageName.trim().toLowerCase(); });
                        var oldSequenceNumber = -1;
                        if (newPageList[objIndex].navigation) {
                            oldSequenceNumber = newPageList[objIndex].navigation.sequence;
                        }
                        newPageList[objIndex] = pageArrayInput[i];
                        if (newPageList[objIndex].navigation) {
                            if (oldSequenceNumber === -1) {
                                newStartingNavigationSequence += 1;
                                oldSequenceNumber = newStartingNavigationSequence;
                            }
                            newPageList[objIndex].navigation.sequence = oldSequenceNumber;
                        }
                    }
                };
                for (var i = 0; i < pageArrayInput.length; i++) {
                    _loop_1(i);
                }
                this._cliLogger.log("newPageList", newPageList);
                this.changeNodeValues("content.pages", newPageList);
            }
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.addWidgetsToJSON = function (widgetArrayInput) {
        try {
            if (widgetArrayInput && widgetArrayInput.length > 0) {
                var widgetsList = JSON.parse(JSON.stringify(this.getAllWidgets()));
                var newWidgetsList = this.getAllWidgets();
                var _loop_2 = function (i) {
                    var isFileExisting = false;
                    for (var j = 0; j < widgetsList.length; j++) {
                        if (widgetsList[j].widgetName.trim().toLowerCase() === widgetArrayInput[i].widgetName.trim().toLowerCase()) {
                            isFileExisting = true;
                            break;
                        }
                    }
                    if (isFileExisting === false) {
                        newWidgetsList.push(widgetArrayInput[i]);
                    }
                    else {
                        var objIndex = newWidgetsList.findIndex(function (obj) { return obj.widgetName.trim().toLowerCase() === widgetArrayInput[i].widgetName.trim().toLowerCase(); });
                        newWidgetsList[objIndex] = widgetArrayInput[i];
                    }
                };
                for (var i = 0; i < widgetArrayInput.length; i++) {
                    _loop_2(i);
                }
                this._cliLogger.log("newWidgetsList", newWidgetsList);
                this.changeNodeValues("content.widgets", newWidgetsList);
            }
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.saveWidgetToJSON = function (widgetObject) {
        try {
            var widgetsList = this.getAllWidgets();
            widgetsList.push(widgetObject);
            this._cliLogger.log("widgetObject", widgetObject);
            this.changeNodeValues("content.widgets", widgetsList);
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.removePagesFromJSON = function (listOfInputPages) {
        try {
            if (listOfInputPages && listOfInputPages.length > 0) {
                var pagesList = this.getAllPages() || [];
                var newList = [];
                for (var i = 0; i < pagesList.length; i++) {
                    var isFileExisting = false;
                    for (var j = 0; j < listOfInputPages.length; j++) {
                        if (pagesList[i].pageName.trim().toLowerCase() === listOfInputPages[j].trim().toLowerCase()) {
                            isFileExisting = true;
                            break;
                        }
                    }
                    if (isFileExisting === false) {
                        newList.push(pagesList[i]);
                    }
                }
                this._cliLogger.log("newList", newList);
                if (newList.length != pagesList.length) {
                    this.changeNodeValues("content.pages", newList);
                }
            }
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.removeWidgetsFromJSON = function (listOfInputWidgets) {
        try {
            if (listOfInputWidgets && listOfInputWidgets.length > 0) {
                var widgetList = this.getAllWidgets() || [];
                var newList = [];
                for (var i = 0; i < widgetList.length; i++) {
                    var isFileExisting = false;
                    for (var j = 0; j < listOfInputWidgets.length; j++) {
                        if (widgetList[i].widgetName.trim().toLowerCase() === listOfInputWidgets[j].trim().toLowerCase()) {
                            isFileExisting = true;
                            break;
                        }
                    }
                    if (isFileExisting === false) {
                        newList.push(widgetList[i]);
                    }
                }
                this._cliLogger.log("newList", newList);
                if (newList.length != widgetList.length) {
                    this.changeNodeValues("content.widgets", newList);
                }
            }
        }
        catch (e) {
            this._cliLogger.log("error", e);
            throw e;
        }
    };
    Ch5CliProjectConfig.prototype.isPageExistInJSON = function (pageName) {
        var pagesArray = this.getAllPages();
        var pageExists = false;
        for (var i = 0; i < pagesArray.length; i++) {
            if (pagesArray[i].pageName.trim().toLowerCase() === pageName.trim().toLowerCase()) {
                this._cliLogger.log("Page EXISTS: " + pageName);
                pageExists = true;
                break;
            }
        }
        return pageExists;
    };
    Ch5CliProjectConfig.prototype.isWidgetExistInJSON = function (widgetName) {
        var widgetsArray = this.getAllWidgets();
        var widgetExists = false;
        for (var i = 0; i < widgetsArray.length; i++) {
            if (widgetsArray[i].widgetName.trim().toLowerCase() === widgetName.trim().toLowerCase()) {
                this._cliLogger.log("Widget EXISTS: " + widgetName);
                widgetExists = true;
                break;
            }
        }
        return widgetExists;
    };
    Ch5CliProjectConfig.prototype.isPageExistInFolder = function (pageName) {
        var pagesArray = this.getAllPages();
        for (var i = 0; i < pagesArray.length; i++) {
            if (fs.existsSync(pagesArray[i].componentPath)) {
                this._cliLogger.log("Component path EXISTS: " + pagesArray[i].componentPath);
            }
            else {
                this._cliLogger.log("Component path DOES NOT EXIST: " + pagesArray[i].componentPath);
            }
        }
    };
    Ch5CliProjectConfig.prototype.changeNodeValues = function (nodeName, nodeValue) {
        var file = editJsonFile(this.PROJECT_CONFIG_PATH);
        file.set(nodeName, nodeValue);
        file.save();
    };
    Ch5CliProjectConfig.prototype.getNodeByKey = function (key) {
        var projectConfigObject = this.getJson();
        return projectConfigObject[key];
    };
    return Ch5CliProjectConfig;
}());
exports.Ch5CliProjectConfig = Ch5CliProjectConfig;
