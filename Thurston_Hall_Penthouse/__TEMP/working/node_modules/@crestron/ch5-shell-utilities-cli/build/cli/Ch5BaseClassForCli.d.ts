import * as commander from "commander";
import { Ch5CliUtil } from "./Ch5CliUtil";
import { Ch5CliLogger } from "./Ch5CliLogger";
import { Ch5CliNamingHelper } from "./Ch5CliNamingHelper";
import { Ch5CliProjectConfig } from "./Ch5CliProjectConfig";
import { Ch5CliConfigFileReader } from "./Ch5CliConfigFileReader";
export declare abstract class Ch5BaseClassForCli {
    private readonly _cliUtil;
    private readonly _cliLogger;
    private readonly _cliConfigFileReader;
    private readonly _cliNamingHelper;
    private readonly _cliProjectConfig;
    private _folderPath;
    private CONFIG_FILE;
    private TRANSLATION_FILE;
    private _inputArguments;
    get getEnquirer(): any;
    get getMultiSelect(): any;
    get getPrompt(): any;
    get getSelect(): any;
    get getConfirm(): any;
    protected get inputArguments(): any;
    protected get utils(): Ch5CliUtil;
    protected get logger(): Ch5CliLogger;
    protected get configFileReader(): Ch5CliConfigFileReader;
    protected get configFile(): import("./ICh5CliConfigFile").ICh5CliConfigFile;
    protected get configFileArgs(): Ch5CliConfigFileReader;
    protected get namingHelper(): Ch5CliNamingHelper;
    protected get projectConfig(): Ch5CliProjectConfig;
    constructor(folderPath: string);
    setInputArgsForTesting(args: any): void;
    processArgs(): any;
    processArgsAnalyze(args: any): any;
    changeConfigParam(key: string, value: any): void;
    mergeJSON(...args: any): {};
    private merger;
    /**
     *
     * @param program
     */
    setupCommand(program: commander.Command): Promise<commander.Command | undefined>;
    private compareVersions;
    protected checkVersionToExecute(): void;
    private convertArrayToCommaSeparatedString;
    /**
     * DO NOT DELETE
     */
    run(): Promise<void | boolean>;
    protected getConfigNode(nodeName: string): any;
    /**
     * Get the String output from default.json file in config
     * @param {*} key
     * @param  {...any} values
     */
    getText(key: string, ...values: string[]): any;
    logError(e: any): any;
}
